This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
backend/
  src/
    data/
      data.ts
    middleware/
      auth.ts
    models/
      Ingredient.ts
      Production.ts
      Recipe.ts
      Supplier.ts
      User.ts
    routes/
      auth.routes.ts
      data.routes.ts
      production.routes.ts
    types/
      express/
        index.d.ts
      express-session.d.ts
    utils/
      seedAdminData.ts
    index.ts
    seed.ts
  .gitignore
  package.json
  tsconfig.json
public/
  placeholder.svg
  robots.txt
src/
  components/
    Dashboard/
      Stats.tsx
    Inventory/
      AddIngredientModal.tsx
      IngredientCard.tsx
    Planning/
      NewScheduleForm.tsx
      ProductionSchedule.tsx
      ScheduleHeader.tsx
    Recipe/
      AddRecipeModal.tsx
    Recipes/
      RecipeCard.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      calendar.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      CircularGauge.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      TooltipWrapper.tsx
      use-toast.ts
    Layout.tsx
    Navbar.tsx
    UnitConverter.tsx
  context/
    AuthContext.tsx
  hooks/
    use-mobile.tsx
    use-toast.ts
  lib/
    data.ts
    units.ts
    utils.ts
  pages/
    Index.tsx
    Inventory.tsx
    Login.tsx
    NotFound.tsx
    Ordering.tsx
    Planning.tsx
    Production.tsx
    Recipes.tsx
    Register.tsx
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.production
.gitignore
components.json
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vercel.json
vite.config.ts

================================================================
Files
================================================================

================
File: backend/src/data/data.ts
================
export interface Ingredient {
  id: string;
  name: string;
  stock: number;
  unit: 'kg' | 'L' | 'pcs' | 'g' | 'mL';
  threshold: number;
  history: { date: string; level: number }[];
}

export interface Recipe {
  id: string;
  name: string;
  ingredients: {
    ingredientId: string;
    amount: number;
  }[];
  batches: {
    date: string;
    supervisor: string;
    quantity: number;
    notes?: string;
  }[];
}

export interface Supplier {
  id: string;
  name: string;
  rating: number;
  preferred: boolean;
  supplierLink?: string;
}

// Generate initial mock data
export const ingredients: Ingredient[] = [
  {
    id: "1",
    name: "Cream",
    stock: 45,
    unit: "L",
    threshold: 50,
    history: [
      { date: "2023-06-01", level: 100 },
      { date: "2023-06-15", level: 85 },
      { date: "2023-07-01", level: 70 },
      { date: "2023-07-15", level: 55 },
      { date: "2023-08-01", level: 45 },
    ],
  },
  {
    id: "2",
    name: "Sugar",
    stock: 120,
    unit: "kg",
    threshold: 50,
    history: [
      { date: "2023-06-01", level: 200 },
      { date: "2023-06-15", level: 180 },
      { date: "2023-07-01", level: 160 },
      { date: "2023-07-15", level: 140 },
      { date: "2023-08-01", level: 120 },
    ],
  },
  {
    id: "3",
    name: "Vanilla Extract",
    stock: 5,
    unit: "L",
    threshold: 10,
    history: [
      { date: "2023-06-01", level: 25 },
      { date: "2023-06-15", level: 20 },
      { date: "2023-07-01", level: 15 },
      { date: "2023-07-15", level: 10 },
      { date: "2023-08-01", level: 5 },
    ],
  },
  {
    id: "4",
    name: "Cocoa Powder",
    stock: 30,
    unit: "kg",
    threshold: 25,
    history: [
      { date: "2023-06-01", level: 50 },
      { date: "2023-06-15", level: 45 },
      { date: "2023-07-01", level: 40 },
      { date: "2023-07-15", level: 35 },
      { date: "2023-08-01", level: 30 },
    ],
  },
  {
    id: "5",
    name: "Strawberries",
    stock: 15,
    unit: "kg",
    threshold: 30,
    history: [
      { date: "2023-06-01", level: 60 },
      { date: "2023-06-15", level: 50 },
      { date: "2023-07-01", level: 40 },
      { date: "2023-07-15", level: 30 },
      { date: "2023-08-01", level: 15 },
    ],
  },
  {
    id: "6",
    name: "Cookie Dough",
    stock: 25,
    unit: "kg",
    threshold: 20,
    history: [
      { date: "2023-06-01", level: 45 },
      { date: "2023-06-15", level: 40 },
      { date: "2023-07-01", level: 35 },
      { date: "2023-07-15", level: 30 },
      { date: "2023-08-01", level: 25 },
    ],
  },
  {
    id: "7",
    name: "Marshmallows",
    stock: 12,
    unit: "kg",
    threshold: 15,
    history: [
      { date: "2023-06-01", level: 30 },
      { date: "2023-06-15", level: 25 },
      { date: "2023-07-01", level: 20 },
      { date: "2023-07-15", level: 15 },
      { date: "2023-08-01", level: 12 },
    ],
  },
  {
    id: "8",
    name: "Nuts",
    stock: 18,
    unit: "kg",
    threshold: 15,
    history: [
      { date: "2023-06-01", level: 35 },
      { date: "2023-06-15", level: 30 },
      { date: "2023-07-01", level: 25 },
      { date: "2023-07-15", level: 20 },
      { date: "2023-08-01", level: 18 },
    ],
  },
  {
    id: "9",
    name: "Milk",
    stock: 60,
    unit: "L",
    threshold: 40,
    history: [
      { date: "2023-06-01", level: 100 },
      { date: "2023-06-15", level: 90 },
      { date: "2023-07-01", level: 80 },
      { date: "2023-07-15", level: 70 },
      { date: "2023-08-01", level: 60 },
    ],
  },
  {
    id: "10",
    name: "Chocolate Chips",
    stock: 22,
    unit: "kg",
    threshold: 25,
    history: [
      { date: "2023-06-01", level: 40 },
      { date: "2023-06-15", level: 35 },
      { date: "2023-07-01", level: 30 },
      { date: "2023-07-15", level: 25 },
      { date: "2023-08-01", level: 22 },
    ],
  },
  {
    id: "11",
    name: "Stabilizer",
    stock: 8,
    unit: "kg",
    threshold: 5,
    history: [
      { date: "2023-06-01", level: 15 },
      { date: "2023-06-15", level: 13 },
      { date: "2023-07-01", level: 11 },
      { date: "2023-07-15", level: 9 },
      { date: "2023-08-01", level: 8 },
    ],
  },
  {
    id: "12",
    name: "Salt",
    stock: 30,
    unit: "kg",
    threshold: 10,
    history: [
      { date: "2023-06-01", level: 35 },
      { date: "2023-06-15", level: 34 },
      { date: "2023-07-01", level: 33 },
      { date: "2023-07-15", level: 32 },
      { date: "2023-08-01", level: 30 },
    ],
  },
];

export const recipes: Recipe[] = [
  {
    id: "1",
    name: "Vanilla",
    ingredients: [
      { ingredientId: "1", amount: 5 }, // Cream
      { ingredientId: "2", amount: 2 }, // Sugar
      { ingredientId: "3", amount: 0.1 }, // Vanilla Extract
      { ingredientId: "9", amount: 2 }, // Milk
      { ingredientId: "11", amount: 0.05 }, // Stabilizer
      { ingredientId: "12", amount: 0.01 }, // Salt
    ],
    batches: [
      {
        date: "2023-07-15",
        supervisor: "Jane Smith",
        quantity: 50,
        notes: "Standard batch",
      },
      {
        date: "2023-07-22",
        supervisor: "John Doe",
        quantity: 55,
        notes: "Extra creamy",
      },
    ],
  },
  {
    id: "2",
    name: "Chocolate",
    ingredients: [
      { ingredientId: "1", amount: 5 }, // Cream
      { ingredientId: "2", amount: 2.5 }, // Sugar
      { ingredientId: "4", amount: 1 }, // Cocoa Powder
      { ingredientId: "9", amount: 1.5 }, // Milk
      { ingredientId: "10", amount: 0.5 }, // Chocolate Chips
      { ingredientId: "11", amount: 0.05 }, // Stabilizer
      { ingredientId: "12", amount: 0.01 }, // Salt
    ],
    batches: [
      {
        date: "2023-07-16",
        supervisor: "Mike Johnson",
        quantity: 45,
        notes: "Dark chocolate variant",
      },
      {
        date: "2023-07-23",
        supervisor: "Jane Smith",
        quantity: 50,
        notes: "Standard batch",
      },
    ],
  },
  {
    id: "3",
    name: "Strawberry",
    ingredients: [
      { ingredientId: "1", amount: 5 }, // Cream
      { ingredientId: "2", amount: 3 }, // Sugar
      { ingredientId: "5", amount: 2 }, // Strawberries
      { ingredientId: "9", amount: 1 }, // Milk
      { ingredientId: "11", amount: 0.05 }, // Stabilizer
      { ingredientId: "12", amount: 0.01 }, // Salt
    ],
    batches: [
      {
        date: "2023-07-17",
        supervisor: "Sarah Wilson",
        quantity: 40,
        notes: "Fresh strawberries",
      },
      {
        date: "2023-07-24",
        supervisor: "John Doe",
        quantity: 45,
        notes: "Extra berries",
      },
    ],
  },
  {
    id: "4",
    name: "Cookie Dough",
    ingredients: [
      { ingredientId: "1", amount: 5 }, // Cream
      { ingredientId: "2", amount: 2 }, // Sugar
      { ingredientId: "6", amount: 2 }, // Cookie Dough
      { ingredientId: "9", amount: 1.5 }, // Milk
      { ingredientId: "10", amount: 0.3 }, // Chocolate Chips
      { ingredientId: "11", amount: 0.05 }, // Stabilizer
      { ingredientId: "12", amount: 0.01 }, // Salt
    ],
    batches: [
      {
        date: "2023-07-18",
        supervisor: "Mike Johnson",
        quantity: 35,
        notes: "Extra cookie chunks",
      },
      {
        date: "2023-07-25",
        supervisor: "Sarah Wilson",
        quantity: 40,
        notes: "Standard batch",
      },
    ],
  },
  {
    id: "5",
    name: "Rocky Road",
    ingredients: [
      { ingredientId: "1", amount: 5 }, // Cream
      { ingredientId: "2", amount: 2.5 }, // Sugar
      { ingredientId: "4", amount: 0.8 }, // Cocoa Powder
      { ingredientId: "7", amount: 1 }, // Marshmallows
      { ingredientId: "8", amount: 1 }, // Nuts
      { ingredientId: "9", amount: 1 }, // Milk
      { ingredientId: "10", amount: 0.5 }, // Chocolate Chips
      { ingredientId: "11", amount: 0.05 }, // Stabilizer
      { ingredientId: "12", amount: 0.01 }, // Salt
    ],
    batches: [
      {
        date: "2023-07-19",
        supervisor: "John Doe",
        quantity: 30,
        notes: "Extra nuts",
      },
      {
        date: "2023-07-26",
        supervisor: "Jane Smith",
        quantity: 35,
        notes: "Standard batch",
      },
    ],
  },
];

export const suppliers: Supplier[] = [
  { id: "1", name: "Dairy Delight", rating: 4.8, preferred: true },
  { id: "2", name: "Sweet Supplies", rating: 4.5, preferred: true },
  { id: "3", name: "Flavor Factory", rating: 4.2, preferred: false },
  { id: "4", name: "Fresh Ingredients Inc.", rating: 4.6, preferred: true },
  { id: "5", name: "Wholesale Foods", rating: 3.9, preferred: false },
];

export const getIngredientById = (id: string): Ingredient | undefined => {
  return ingredients.find((ingredient) => ingredient.id === id);
};

export const getStockStatus = (ingredient: Ingredient): 'critical' | 'warning' | 'normal' => {
  const percentage = (ingredient.stock / ingredient.threshold) * 100;
  if (percentage <= 50) return 'critical';
  if (percentage <= 80) return 'warning';
  return 'normal';
};

export const getIngredientsByUrgency = (): Ingredient[] => {
  return [...ingredients].sort((a, b) => {
    const aPercentage = (a.stock / a.threshold) * 100;
    const bPercentage = (b.stock / b.threshold) * 100;
    return aPercentage - bPercentage;
  });
};

export const getRecipeById = (id: string): Recipe | undefined => {
  return recipes.find((recipe) => recipe.id === id);
};

export const getSupplierById = (id: string): Supplier | undefined => {
  return suppliers.find((supplier) => supplier.id === id);
};

export const convertUnit = (value: number, fromUnit: string, toUnit: string): number => {
  // Simplified unit conversion - would be more complex in a real app
  if (fromUnit === toUnit) return value;
  
  // Weight conversions
  if (fromUnit === 'kg' && toUnit === 'g') return value * 1000;
  if (fromUnit === 'g' && toUnit === 'kg') return value / 1000;
  
  // Volume conversions
  if (fromUnit === 'L' && toUnit === 'mL') return value * 1000;
  if (fromUnit === 'mL' && toUnit === 'L') return value / 1000;
  
  // Unsupported conversion
  console.warn(`Conversion from ${fromUnit} to ${toUnit} not supported`);
  return value;
};

================
File: backend/src/middleware/auth.ts
================
import { Request, Response, NextFunction } from "express";

export const authenticateUser = (req: Request, res: Response, next: NextFunction) => {
  if (!req.session.user) {
    return res.status(401).json({ error: "Unauthorized" });
  }
  next();
};

================
File: backend/src/models/Ingredient.ts
================
import mongoose from "mongoose";

const IngredientSchema = new mongoose.Schema({
  name: { type: String, required: true },
  stock: { 
    type: Number, 
    required: true, 
    min: 0, 
    get: (v: number | undefined) => v !== undefined ? parseFloat(v.toFixed(3)) : undefined 
  },
  unit: { type: String, required: true },
  threshold: { 
    type: Number, 
    required: true, 
    min: 0, 
    get: (v: number | undefined) => v !== undefined ? parseFloat(v.toFixed(3)) : undefined 
  },
  history: [{
    date: String,
    level: { 
      type: Number, 
      get: (v: number | undefined) => v !== undefined ? parseFloat(v.toFixed(3)) : undefined 
    }
  }],
  owner: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  minimumOrderQuantity: { 
    type: Number, 
    min: 0, 
    get: (v: number | undefined) => v !== undefined ? parseFloat(v.toFixed(3)) : undefined 
  },
  supplierId: { type: mongoose.Schema.Types.ObjectId, ref: "Supplier" },
  upc: { type: String },
  unitCategory: { type: String },
}, {
  toJSON: { getters: true },
  toObject: { getters: true }
});

export default mongoose.model("Ingredient", IngredientSchema);

================
File: backend/src/models/Production.ts
================
import mongoose from "mongoose";

const ProductionSchema = new mongoose.Schema({
  date: { type: Date, required: true },
  recipeId: { type: mongoose.Schema.Types.ObjectId, ref: "Recipe", required: true },
  quantity: { type: Number, required: true },
  notes: String,
  supervisor: { type: String, required: true },
  owner: { type: String, required: true },
});

export const Production = mongoose.model("Production", ProductionSchema);

================
File: backend/src/models/Recipe.ts
================
import mongoose from "mongoose";

const RecipeSchema = new mongoose.Schema({
  id: String,
  name: { type: String, required: true },
  ingredients: [
    {
      ingredientId: { type: String, required: true },
      amount: { type: Number, required: true, min: 0, get: (v: number) => parseFloat(v.toFixed(3)) },
    },
  ],
  batches: [
    {
      date: String,
      supervisor: String,
      quantity: { type: Number, min: 0, get: (v: number) => parseFloat(v.toFixed(3)) },
      notes: String,
    },
  ],
  owner: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
}, {
  toJSON: { getters: true },
  toObject: { getters: true }
});

export default mongoose.model("Recipe", RecipeSchema);

================
File: backend/src/models/Supplier.ts
================
import mongoose from "mongoose";

const SupplierSchema = new mongoose.Schema({
  name: { type: String, required: true },
  rating: { type: Number, default: 0 },
  preferred: { type: Boolean, default: false },
  supplierLink: { type: String },
  owner: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
});

export default mongoose.model("Supplier", SupplierSchema);

================
File: backend/src/models/User.ts
================
import mongoose from "mongoose";

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  isAdmin: { type: Boolean, default: false },
});

export default mongoose.model("User", UserSchema);

================
File: backend/src/routes/auth.routes.ts
================
import express, { Request, Response } from "express";
import session from "express-session";
import bcrypt from "bcrypt";
import User from "../models/User";
import Ingredient from "../models/Ingredient";
import { seedAdminData } from "../utils/seedAdminData";

const router = express.Router();

// Extend session to include user property
declare module "express-session" {
  interface SessionData {
    user?: { 
      username: string; 
      id: string; 
      lastAccess: number 
    };
  }
}

// POST /api/auth/register
router.post("/register", async (req: Request, res: Response) => {
  const { username, password } = req.body;

  if (!username || !password) {
    return res
      .status(400)
      .json({ message: "Username and password are required" });
  }

  try {
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ message: "User already exists" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      username,
      password: hashedPassword,
      isAdmin: false, // New users are not admins by default
    });
    await newUser.save();

    res.status(201).json({ message: "User registered successfully" });
  } catch (err) {
    console.error("Registration error:", err);
    res.status(500).json({ message: "Internal server error" });
  }
});

// POST /api/auth/login
router.post("/login", async (req: Request, res: Response) => {
  const { username, password } = req.body;

  if (!username || !password) {
    return res
      .status(400)
      .json({ message: "Username and password are required" });
  }

  try {
    const user = await User.findOne({ username });
    if (!user || !user.password) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    // Regenerate session to prevent session fixation
    req.session.regenerate((err) => {
      if (err) {
        console.error("Session regeneration error:", err);
        return res.status(500).json({ message: "Session error" });
      }

      // Set session data
      req.session.user = { 
        username: user.username,
        id: user._id.toString(),
        lastAccess: Date.now()
      };

      // Save session explicitly
      req.session.save((err) => {
        if (err) {
          console.error("Session save error:", err);
          return res.status(500).json({ message: "Session save failed" });
        }

        // Send response after session is saved
        res.status(200).json({
          message: "Login successful",
          user: {
            username: user.username,
            isAdmin: user.isAdmin,
          },
        });

        // Seed data for admin if needed (after response sent)
        if (user.username === "admin") {
          Ingredient.exists({ owner: user._id }).then((hasIngredients) => {
            if (!hasIngredients) {
              seedAdminData(user._id.toString()).then(() => {
                console.log(" Seeded data for admin!");
              });
            }
          });
        }
      });
    });
  } catch (err) {
    console.error("Login error:", err);
    res.status(500).json({ message: "Internal server error" });
  }
});

// POST /api/auth/logout
router.post("/logout", (req: Request, res: Response) => {
  // Regenerate the session to prevent session fixation
  req.session.regenerate((err) => {
    if (err) {
      console.error("Session regeneration error during logout:", err);
      return res.status(500).json({ message: "Logout failed" });
    }

    // Destroy the session
    req.session.destroy((err) => {
      if (err) {
        console.error("Session destruction error:", err);
        return res.status(500).json({ message: "Logout failed" });
      }
      res.clearCookie("batchr.sid");
      res.status(200).json({ message: "Logged out successfully" });
    });
  });
});

// GET /api/auth/session
router.get("/session", async (req: Request, res: Response) => {
  try {
    console.log("Session check:", {
      id: req.sessionID,
      user: req.session.user,
      cookie: req.session.cookie,
    });
    
    if (!req.session.user) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    const user = await User.findOne({ username: req.session.user.username });
    if (!user) {
      // Clear invalid session
      req.session.destroy((err) => {
        if (err) console.error("Error destroying invalid session:", err);
      });
      return res.status(401).json({ message: "Not authenticated" });
    }

    res.json({
      user: {
        username: user.username,
        isAdmin: user.isAdmin,
      }
    });
  } catch (err) {
    console.error("Session error:", err);
    res.status(500).json({ message: "Error fetching session" });
  }
});

// sanity check (user session data)
router.get("/debug", (req, res) => {
  console.log("Session in /debug route:", req.session);
  res.json({ session: req.session });
});

export default router;

================
File: backend/src/routes/data.routes.ts
================
import express, { Request, Response, NextFunction } from "express";
import Ingredient from "../models/Ingredient";
import Recipe from "../models/Recipe";
import Supplier from "../models/Supplier";
import User from "../models/User";
import { Document, Types } from "mongoose";

const router = express.Router();

interface AuthedRequest extends Request {
  user?: Document & { _id: Types.ObjectId; username: string };
}

// Auth middleware
const ensureAuth = async (req: AuthedRequest, res: Response, next: NextFunction) => {
  try {
    console.log("Auth check - Session:", req.session);
    
    if (!req.session.user) {
      console.log("No session user found");
      return res.status(401).json({ message: "Unauthorized" });
    }

    // Update last access time
    req.session.user.lastAccess = Date.now();

    const userDoc = await User.findOne({ 
      username: req.session.user.username,
      _id: req.session.user.id 
    });

    if (!userDoc) {
      console.log("User not found:", req.session.user.username);
      return res.status(404).json({ message: "User not found" });
    }

    req.user = userDoc;
    console.log("User authenticated:", userDoc.username);
    next();
  } catch (err) {
    console.error("Auth middleware error:", err);
    res.status(500).json({ message: "Authentication error" });
  }
};

// INGREDIENT ROUTES
router.get("/ingredients", ensureAuth, async (req: AuthedRequest, res: Response) => {
  try {
    const data = await Ingredient.find({ owner: req.user!._id });
    res.json(data);
  } catch (err) {
    console.error("Error fetching ingredients:", err);
    res.status(500).json({ message: "Error fetching ingredients" });
  }
});

router.post("/ingredients", ensureAuth, async (req: AuthedRequest, res: Response) => {
  try {
    const newIngredient = new Ingredient({ ...req.body, owner: req.user!._id });
    await newIngredient.save();
    res.status(201).json(newIngredient);
  } catch (err) {
    console.error("Error creating ingredient:", err);
    res.status(500).json({ message: "Error creating ingredient" });
  }
});

router.put("/ingredients/:id", ensureAuth, async (req: AuthedRequest, res: Response) => {
  try {
    const ingredient = await Ingredient.findOneAndUpdate(
      { _id: req.params.id, owner: req.user!._id },
      { ...req.body },
      { new: true }
    );
    
    if (!ingredient) {
      return res.status(404).json({ message: "Ingredient not found" });
    }
    
    res.json(ingredient);
  } catch (err) {
    console.error("Error updating ingredient:", err);
    res.status(500).json({ message: "Error updating ingredient" });
  }
});

router.delete("/ingredients/:id", ensureAuth, async (req: AuthedRequest, res: Response) => {
  try {
    await Ingredient.findOneAndDelete({ _id: req.params.id, owner: req.user!._id });
    res.status(204).end();
  } catch (err) {
    console.error("Error deleting ingredient:", err);
    res.status(500).json({ message: "Error deleting ingredient" });
  }
});

// RECIPE ROUTES
router.get("/recipes", ensureAuth, async (req: AuthedRequest, res: Response) => {
  try {
    const data = await Recipe.find({ owner: req.user!._id });
    res.json(data);
  } catch (err) {
    console.error("Error fetching recipes:", err);
    res.status(500).json({ message: "Error fetching recipes" });
  }
});

router.post("/recipes", ensureAuth, async (req: AuthedRequest, res: Response) => {
  try {
    const newRecipe = new Recipe({
      ...req.body,
      owner: req.user!._id,
      batches: [] // Initialize with empty batches array
    });
    await newRecipe.save();
    res.status(201).json(newRecipe);
  } catch (err) {
    console.error("Error creating recipe:", err);
    res.status(500).json({ message: "Error creating recipe" });
  }
});

router.put("/recipes/:id", ensureAuth, async (req: AuthedRequest, res: Response) => {
  try {
    const recipe = await Recipe.findOneAndUpdate(
      { _id: req.params.id, owner: req.user!._id },
      { ...req.body },
      { new: true }
    );
    
    if (!recipe) {
      return res.status(404).json({ message: "Recipe not found" });
    }
    
    res.json(recipe);
  } catch (err) {
    console.error("Error updating recipe:", err);
    res.status(500).json({ message: "Error updating recipe" });
  }
});

router.delete("/recipes/:id", ensureAuth, async (req: AuthedRequest, res: Response) => {
  try {
    await Recipe.findOneAndDelete({ _id: req.params.id, owner: req.user!._id });
    res.status(204).end();
  } catch (err) {
    console.error("Error deleting recipe:", err);
    res.status(500).json({ message: "Error deleting recipe" });
  }
});

// SUPPLIER ROUTES
router.get("/suppliers", ensureAuth, async (req: AuthedRequest, res: Response) => {
  try {
    const data = await Supplier.find({ owner: req.user!._id });
    res.json(data);
  } catch (err) {
    console.error("Error fetching suppliers:", err);
    res.status(500).json({ message: "Error fetching suppliers" });
  }
});

router.post("/suppliers", ensureAuth, async (req: AuthedRequest, res: Response) => {
  try {
    const newSupplier = new Supplier({ ...req.body, owner: req.user!._id });
    await newSupplier.save();
    res.status(201).json(newSupplier);
  } catch (err) {
    console.error("Error creating supplier:", err);
    res.status(500).json({ message: "Error creating supplier" });
  }
});

router.delete("/suppliers/:id", ensureAuth, async (req: AuthedRequest, res: Response) => {
  try {
    await Supplier.findOneAndDelete({ _id: req.params.id, owner: req.user!._id });
    res.status(204).end();
  } catch (err) {
    console.error("Error deleting supplier:", err);
    res.status(500).json({ message: "Error deleting supplier" });
  }
});

export default router;

================
File: backend/src/routes/production.routes.ts
================
import express from "express";
import { authenticateUser } from "../middleware/auth";
import Recipe from "../models/Recipe";
import Ingredient from "../models/Ingredient";
import { Production } from "../models/Production";

const router = express.Router();

// Get all production logs for the authenticated user
router.get("/", authenticateUser, async (req, res) => {
  try {
    const logs = await Production.find({
      owner: req.session.user?.username,
    }).sort({ date: -1 });
    res.json(logs);
  } catch (err) {
    console.error("Failed to fetch production logs:", err);
    res.status(500).json({ error: "Failed to fetch production logs" });
  }
});

// Add a new production log and update ingredient stocks
router.post("/", authenticateUser, async (req, res) => {
  const { date, recipeId, quantity, notes, supervisor } = req.body;

  try {
    // Find the recipe
    const recipe = await Recipe.findById(recipeId);
    if (!recipe) {
      return res.status(404).json({ error: "Recipe not found" });
    }

    // Check if we have enough ingredients
    const ingredientUpdates = [];
    for (const recipeIngredient of recipe.ingredients) {
      const ingredient = await Ingredient.findById(
        recipeIngredient.ingredientId
      );
      if (!ingredient) {
        return res.status(404).json({
          error: `Ingredient not found: ${recipeIngredient.ingredientId}`,
        });
      }

      // Ensure amount and stock are defined
      const amount = recipeIngredient.amount ?? 0;
      const currentStock = ingredient.stock ?? 0;

      // Calculate how much of this ingredient we need
      const requiredAmount = amount * quantity;

      // Check if we have enough
      if (currentStock < requiredAmount) {
        return res.status(400).json({
          error: `Insufficient stock for ingredient: ${ingredient.name}. Need ${requiredAmount} ${ingredient.unit}, but only have ${currentStock} ${ingredient.unit}`,
        });
      }

      // Queue the update
      ingredientUpdates.push({
        ingredientId: ingredient._id,
        newStock: currentStock - requiredAmount,
      });
    }

    // Get current date in YYYY-MM-DD format for history
    const today = new Date().toISOString().split("T")[0];

    // Create production log
    const production = new Production({
      date: new Date(date), // Store full date for production log
      recipeId,
      quantity,
      notes,
      supervisor,
      owner: req.session.user?.username,
    });

    // Save production log
    await production.save();

    // Update all ingredient stocks
    for (const update of ingredientUpdates) {
      await Ingredient.findByIdAndUpdate(update.ingredientId, {
        $set: { stock: update.newStock },
        $push: {
          history: {
            date: date, // Use today's date for stock history
            level: update.newStock,
          },
        },
      });
    }

    res.status(201).json(production);
  } catch (err) {
    console.error("Failed to add production log:", err);
    res.status(500).json({ error: "Failed to add production log" });
  }
});

export default router;

================
File: backend/src/types/express/index.d.ts
================
import "express-session";

declare module "express-session" {
  interface SessionData {
    user?: {
      username: string;
    };
  }
}

================
File: backend/src/types/express-session.d.ts
================
import "express-session";

declare module "express-session" {
  interface SessionData {
    user?: {
      username: string;
    };
  }
}

================
File: backend/src/utils/seedAdminData.ts
================
import Ingredient from "../models/Ingredient";
import Recipe from "../models/Recipe";
import Supplier from "../models/Supplier";
import { ingredients, recipes, suppliers } from "../data/data";

export const seedAdminData = async (ownerId: string) => {
  await Ingredient.insertMany(
    ingredients.map((i) => ({ ...i, owner: ownerId }))
  );
  await Recipe.insertMany(
    recipes.map((r) => ({ ...r, owner: ownerId }))
  );
  await Supplier.insertMany(
    suppliers.map((s) => ({ ...s, owner: ownerId }))
  );
};

================
File: backend/src/index.ts
================
import express from "express";
import session from "express-session";
import MongoStore from "connect-mongo";
import cors from "cors";
import dotenv from "dotenv";
import mongoose from "mongoose";
import bcrypt from "bcrypt";
import authRoutes from "./routes/auth.routes";
import dataRoutes from "./routes/data.routes";
import productionRoutes from "./routes/production.routes";
import User from "./models/User";
import { seedAdminData } from "./utils/seedAdminData";

dotenv.config();
const app = express();

app.set("trust proxy", 1);

const allowedOrigins = [
  "http://localhost:5173",
  "http://localhost:8080",
  "https://batchr.vercel.app",
];

app.use(
  cors({
    origin: (origin, callback) => {
      console.log("CORS origin check:", origin);

      if (!origin) {
        // Allow server-to-server or curl-like requests
        return callback(null, true);
      }

      if (allowedOrigins.includes(origin)) {
        return callback(null, true);
      }

      // Log the blocked origin to debug
      console.error("❌ Blocked by CORS:", origin);
      return callback(new Error("Not allowed by CORS"));
    },
    credentials: true,
  })
);

app.use(express.json());

declare module "express-session" {
  interface SessionData {
    user?: {
      username: string;
      id: string;
      lastAccess: number;
    };
  }
}

app.use(
  session({
    name: "batchr.sid",
    secret: process.env.SESSION_SECRET!,
    resave: false,
    saveUninitialized: false,
    store: MongoStore.create({
      mongoUrl: process.env.MONGO_URI!,
      ttl: 24 * 60 * 60, // 1 day in seconds
      autoRemove: 'native',
      touchAfter: 24 * 3600, // Only update session every 24 hours unless data changes
      crypto: {
        secret: false // Disable encryption since we're having issues
      }
    }),
    cookie: {
      maxAge: 1000 * 60 * 60 * 24, // 1 day
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: process.env.NODE_ENV === "production" ? "none" : "lax",
      path: '/',
    },
  })
);

// Log session data for debugging
app.use((req, res, next) => {
  console.log("Session data:", {
    id: req.sessionID,
    user: req.session.user,
    cookie: req.session.cookie,
  });
  next();
});

app.use("/api/auth", authRoutes);
app.use("/api", dataRoutes);
app.use("/api/production", productionRoutes);

mongoose
  .connect(process.env.MONGO_URI!)
  .then(async () => {
    console.log("Connected to MongoDB");

    // Clear all existing sessions to avoid any encryption-related issues
    if (mongoose.connection.db) {
      await mongoose.connection.db.collection('sessions').deleteMany({});
    }

    const existing = await User.findOne({ username: "admin" });
    if (!existing) {
      const hashedPassword = await bcrypt.hash("123", 10);
      const adminUser = new User({
        username: "admin",
        password: hashedPassword,
        isAdmin: true,
      });
      await adminUser.save();
      await seedAdminData(adminUser._id.toString());
      console.log("Seeded admin user and demo data");
    } else {
      console.log("Admin user already exists");
    }

    app.listen(process.env.PORT, () =>
      console.log(`🚀 Backend running at ${process.env.PORT}`)
    );
  })
  .catch((err) => console.error("MongoDB connection error:", err));

================
File: backend/src/seed.ts
================
import mongoose from "mongoose";
import dotenv from "dotenv";
import bcrypt from "bcryptjs";
import User from "./models/User";
import Ingredient from "./models/Ingredient";
import Recipe from "./models/Recipe";
import Supplier from "./models/Supplier";
import { ingredients, recipes, suppliers } from "./data/data";

dotenv.config();

const seed = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI!);

    // Clear all collections
    await User.deleteMany({});
    await Ingredient.deleteMany({});
    await Recipe.deleteMany({});
    await Supplier.deleteMany({});

    // Create admin user
    const hashedPassword = await bcrypt.hash("123", 10);
    const adminUser = await User.create({
      username: "admin",
      password: hashedPassword,
      isAdmin: true,
    });

    // Associate seed data with admin user
    const ingredientsWithOwner = ingredients.map((ingredient) => ({
      ...ingredient,
      owner: adminUser._id,
    }));

    const recipesWithOwner = recipes.map((recipe) => ({
      ...recipe,
      owner: adminUser._id,
    }));

    const suppliersWithOwner = suppliers.map((supplier) => ({
      ...supplier,
      owner: adminUser._id,
    }));

    // Insert data with owner references
    await Ingredient.insertMany(ingredientsWithOwner);
    await Recipe.insertMany(recipesWithOwner);
    await Supplier.insertMany(suppliersWithOwner);

    console.log("Database seeded successfully!");
  } catch (error) {
    console.error("Error seeding database:", error);
  } finally {
    process.exit();
  }
};

seed();

================
File: backend/.gitignore
================
.env

================
File: backend/package.json
================
{
  "name": "backend",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "ts-node src/index.ts",
    "dev": "ts-node src/index.ts",
    "seed": "ts-node src/seed.ts",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "@types/express": "^4.17.21",
    "bcrypt": "^5.1.1",
    "connect-mongo": "^5.1.0",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "mongodb": "^6.15.0",
    "mongoose": "^8.13.0"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.2",
    "@types/cors": "^2.8.17",
    "@types/express-session": "^1.18.1",
    "@types/node": "^22.13.13",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.2"
  }
}

================
File: backend/tsconfig.json
================
{
    "compilerOptions": {
      "target": "ES6",
      "module": "commonjs",
      "rootDir": "./src",
      "outDir": "./dist",
      "esModuleInterop": true,
      "strict": true,
      "moduleResolution": "node",
      "resolveJsonModule": true,
      "typeRoots": ["./node_modules/@types", "./src/types"]
    },
    "include": ["src", "src/types"]
}

================
File: public/placeholder.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

================
File: public/robots.txt
================
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /

================
File: src/components/Dashboard/Stats.tsx
================
import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Ingredient, Recipe } from "@/lib/data";
import { AlertTriangle, CheckCircle, Clock, TrendingDown } from "lucide-react";
import { Link } from "react-router-dom";
import { CardDescription } from "@/components/ui/card";

export const Stats = () => {
  const [ingredients, setIngredients] = useState<Ingredient[]>([]);
  const [recipes, setRecipes] = useState<Recipe[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch ingredients
        const ingredientsRes = await fetch(
          `${import.meta.env.VITE_API_URL}/api/ingredients`,
          {
            credentials: "include",
          }
        );
        const ingredientsData = await ingredientsRes.json();
        setIngredients(ingredientsData);

        // Fetch recipes
        const recipesRes = await fetch(
          `${import.meta.env.VITE_API_URL}/api/recipes`,
          {
            credentials: "include",
          }
        );
        const recipesData = await recipesRes.json();
        setRecipes(recipesData);
      } catch (err) {
        console.error("Failed to fetch data for stats:", err);
      }
    };

    fetchData();
  }, []);

  // Calculate stats from real data
  const lowStockCount = ingredients.filter(
    (ingredient) => ingredient.stock < ingredient.threshold
  ).length;

  const totalIngredients = ingredients.length;
  const totalRecipes = recipes.length;
  const criticalIngredients = ingredients.filter(
    (ingredient) => ingredient.stock < ingredient.threshold * 0.5
  ).length;

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      <Card className="hover-scale">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Low Stock Items</CardTitle>
          <AlertTriangle className="h-4 w-4 text-orange-500" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{lowStockCount}</div>
          <p className="text-xs text-muted-foreground">
            {lowStockCount > 0
              ? "Items below threshold"
              : "All items above threshold"}
          </p>
        </CardContent>
      </Card>

      <Card className="hover-scale">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Critical Items</CardTitle>
          <TrendingDown className="h-4 w-4 text-destructive" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{criticalIngredients}</div>
          <p className="text-xs text-muted-foreground">
            {criticalIngredients > 0
              ? "Urgent attention needed"
              : "No critical items"}
          </p>
        </CardContent>
      </Card>
      <Link to="/inventory">
        <Card className="hover-scale">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total Ingredients
            </CardTitle>
            <CheckCircle className="h-4 w-4 text-emerald-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalIngredients}</div>
            <p className="text-xs text-muted-foreground">
              In inventory management
            </p>
          </CardContent>
        </Card>
      </Link>
      <Link to="/recipes">
        <Card className="hover-scale">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Active Recipes
            </CardTitle>
            <Clock className="h-4 w-4 text-blue-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalRecipes}</div>
            <p className="text-xs text-muted-foreground">
              Recipes in production
            </p>
          </CardContent>
        </Card>
      </Link>
    </div>
  );
};

export default Stats;

================
File: src/components/Inventory/AddIngredientModal.tsx
================
import React, { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Ingredient, Supplier } from "@/lib/data";
import { UnitConverter } from "@/components/UnitConverter";
import { UnitCategoryType } from "@/lib/units";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface AddIngredientModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onAddIngredient: (values: {
    name: string;
    stock: number;
    threshold: number;
    unit: string;
    unitCategory: UnitCategoryType;
    minimumOrderQuantity?: number;
    supplierId?: string;
    upc?: string;
  }) => void;
  onEditIngredient?: (
    id: string,
    values: {
      name: string;
      stock: number;
      threshold: number;
      unit: string;
      unitCategory: UnitCategoryType;
      minimumOrderQuantity?: number;
      supplierId?: string;
      upc?: string;
    }
  ) => void;
  editingIngredient?: Ingredient | null;
}

export const AddIngredientModal: React.FC<AddIngredientModalProps> = ({
  open,
  onOpenChange,
  onAddIngredient,
  onEditIngredient,
  editingIngredient,
}) => {
  const [name, setName] = useState("");
  const [stock, setStock] = useState<number>(0);
  const [threshold, setThreshold] = useState<number>(0);
  const [unit, setUnit] = useState("");
  const [unitCategory, setUnitCategory] =
    useState<UnitCategoryType>("dairy_liquid");
  const [minimumOrderQuantity, setMinimumOrderQuantity] = useState<
    number | undefined
  >();
  const [supplierId, setSupplierId] = useState<string>("unassigned");
  const [upc, setUpc] = useState<string>("");
  const [userSuppliers, setUserSuppliers] = useState<Supplier[]>([]);

  useEffect(() => {
    // Fetch user's suppliers from the backend
    const fetchSuppliers = async () => {
      try {
        const response = await fetch("/api/suppliers");
        if (!response.ok) {
          throw new Error("Failed to fetch suppliers");
        }
        const data = await response.json();
        setUserSuppliers(data);
      } catch (error) {
        console.error("Error fetching suppliers:", error);
      }
    };

    fetchSuppliers();
  }, []);

  useEffect(() => {
    if (editingIngredient) {
      setName(editingIngredient.name);
      setStock(editingIngredient.stock);
      setThreshold(editingIngredient.threshold);
      setUnit(editingIngredient.unit);
      setUnitCategory(editingIngredient.unitCategory || "dairy_liquid");
      setMinimumOrderQuantity(editingIngredient.minimumOrderQuantity);
      setSupplierId(editingIngredient.supplierId || "unassigned");
      setUpc(editingIngredient.upc || "");
    } else {
      // Reset form when not editing
      setName("");
      setStock(0);
      setThreshold(0);
      setUnit("");
      setUnitCategory("dairy_liquid");
      setMinimumOrderQuantity(undefined);
      setSupplierId("unassigned");
      setUpc("");
    }
  }, [editingIngredient]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    const values = {
      name,
      stock,
      threshold,
      unit,
      unitCategory,
      minimumOrderQuantity,
      supplierId: supplierId === "unassigned" ? undefined : supplierId,
      upc: upc || undefined,
    };

    if (editingIngredient && onEditIngredient) {
      onEditIngredient(editingIngredient._id, values);
    } else {
      onAddIngredient(values);
    }

    onOpenChange(false);
  };

  const handleUnitChange = (newUnit: string) => {
    setUnit(newUnit);
  };

  const handleUnitCategoryChange = (category: UnitCategoryType) => {
    setUnitCategory(category);
    setUnit(""); // Reset unit when category changes
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle>
            {editingIngredient ? "Edit" : "Add New"} Ingredient
          </DialogTitle>
          <DialogDescription>
            {editingIngredient ? "Update" : "Enter"} the details for the
            ingredient.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="name">Name</Label>
              <Input
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label>Unit Category</Label>
              <UnitConverter
                category={unitCategory}
                initialUnit={unit}
                onUnitChange={handleUnitChange}
                showConverter={false}
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="stock">Current Stock ({unit})</Label>
                <Input
                  id="stock"
                  type="number"
                  value={stock}
                  onChange={(e) => setStock(Number(e.target.value))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="threshold">PAR Level ({unit})</Label>
                <Input
                  id="threshold"
                  type="number"
                  value={threshold}
                  onChange={(e) => setThreshold(Number(e.target.value))}
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="minimumOrderQuantity">
                  Minimum Order Quantity ({unit})
                </Label>
                <Input
                  id="minimumOrderQuantity"
                  type="number"
                  value={minimumOrderQuantity || ""}
                  onChange={(e) =>
                    setMinimumOrderQuantity(
                      e.target.value ? Number(e.target.value) : undefined
                    )
                  }
                  placeholder="Optional"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="supplier">Supplier</Label>
                <Select
                  value={supplierId}
                  onValueChange={(value) => setSupplierId(value)}
                >
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select supplier" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="unassigned">No Supplier</SelectItem>
                    {userSuppliers &&
                      userSuppliers.map((supplier) => (
                        <SelectItem key={supplier._id} value={supplier._id}>
                          {supplier.name}
                          {supplier.preferred && " (Preferred)"}
                        </SelectItem>
                      ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="upc">UPC Code</Label>
              <Input
                id="upc"
                value={upc}
                onChange={(e) => setUpc(e.target.value)}
                placeholder="Optional"
              />
            </div>
          </div>
          <DialogFooter>
            <Button type="submit">
              {editingIngredient ? "Update" : "Add"} Ingredient
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/Inventory/IngredientCard.tsx
================
import React, { useState } from "react";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { CircularGauge } from "@/components/ui/CircularGauge";
import { Ingredient, getStockStatus } from "@/lib/data";
import { AreaChart, ChevronDown, ChevronUp, Edit, Trash2 } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
import {
  ResponsiveContainer,
  AreaChart as RechartsAreaChart,
  Area,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
} from "recharts";
import { toast } from "sonner";

interface IngredientCardProps {
  ingredient: Ingredient;
  onEdit?: (ingredient: Ingredient) => void;
  onDelete?: (ingredient: Ingredient) => void;
}

export const IngredientCard: React.FC<IngredientCardProps> = ({
  ingredient,
  onEdit,
  onDelete,
}) => {
  const [expanded, setExpanded] = useState(false);
  const [detailsOpen, setDetailsOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);

  const toggleExpanded = () => {
    setExpanded(!expanded);
  };

  const handleEditClick = () => {
    if (onEdit) {
      onEdit(ingredient);
    }
  };

  const handleDeleteClick = () => {
    setDeleteDialogOpen(true);
  };

  const handleConfirmDelete = async () => {
    if (onDelete) {
      onDelete(ingredient);
    }
    setDeleteDialogOpen(false);
  };

  const status = getStockStatus(ingredient);
  const statusColor = {
    critical: "bg-danger text-danger-foreground",
    warning: "bg-warning text-warning-foreground",
    normal: "bg-success text-success-foreground",
  }[status];

  const chartData = ingredient.history.map((item) => ({
    date: new Date(item.date).toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
    }),
    stock: item.level,
  }));

  return (
    <>
      <Card
        className={cn(
          "hover-scale transition-all duration-300 overflow-hidden",
          expanded && "row-span-2"
        )}
      >
        <CardHeader className="pb-2">
          <div className="flex justify-between items-start">
            <CardTitle className="text-lg font-semibold line-clamp-1">
              {ingredient.name}
            </CardTitle>
            <Badge
              className={cn(
                "transition-colors ml-2 px-2 py-0 h-5 text-xs",
                statusColor
              )}
            >
              {status === "critical"
                ? "Critical"
                : status === "warning"
                ? "Low"
                : "Good"}
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="pb-2">
          <div className="flex items-center justify-between">
            <CircularGauge
              value={ingredient.stock}
              maxValue={ingredient.threshold * 2}
              size={80}
              thickness={8}
              label={ingredient.unit}
              valueFormatter={(value) => `${value}`}
            />
            <div className="space-y-1 text-sm">
              <div className="flex justify-between items-center">
                <span className="text-muted-foreground">Stock:</span>
                <span className="font-medium">
                  {ingredient.stock} {ingredient.unit}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-muted-foreground">Threshold:</span>
                <span className="font-medium">
                  {ingredient.threshold} {ingredient.unit}
                </span>
              </div>
              <div className="pt-2">
                <Button
                  size="sm"
                  variant="outline"
                  className="w-full h-7 text-xs"
                  onClick={() => setDetailsOpen(true)}
                >
                  <AreaChart size={14} className="mr-1" /> View History
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
        <CardFooter className="flex justify-between pt-0">
          <div className="flex gap-2">
            <Button variant="ghost" size="icon" onClick={handleEditClick}>
              <Edit className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="icon" onClick={handleDeleteClick}>
              <Trash2 className="h-4 w-4 text-destructive" />
            </Button>
            <Button variant="ghost" size="icon" onClick={toggleExpanded}>
              {expanded ? (
                <ChevronUp className="h-4 w-4" />
              ) : (
                <ChevronDown className="h-4 w-4" />
              )}
            </Button>
          </div>
        </CardFooter>

        {expanded && (
          <div className="px-6 pb-4 pt-0 animate-fade-in">
            <div className="h-[120px] w-full">
              <ResponsiveContainer width="100%" height="100%">
                <RechartsAreaChart
                  data={chartData}
                  margin={{ top: 5, right: 5, left: 5, bottom: 5 }}
                >
                  <defs>
                    <linearGradient id="stockGradient" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="5%" stopColor="#3984A3" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#3984A3" stopOpacity={0} />
                    </linearGradient>
                  </defs>
                  <XAxis
                    dataKey="date"
                    tick={{ fontSize: 10 }}
                    tickLine={false}
                    axisLine={false}
                  />
                  <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#f0f0f0" />
                  <Tooltip
                    contentStyle={{
                      borderRadius: "8px",
                      border: "none",
                      boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                    }}
                  />
                  <Area
                    type="monotone"
                    dataKey="stock"
                    stroke="#3984A3"
                    fillOpacity={1}
                    fill="url(#stockGradient)"
                  />
                </RechartsAreaChart>
              </ResponsiveContainer>
            </div>
          </div>
        )}
      </Card>

      <Dialog open={detailsOpen} onOpenChange={setDetailsOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Ingredient History</DialogTitle>
            <DialogDescription>
              Historical stock levels for {ingredient.name}
            </DialogDescription>
          </DialogHeader>

          <div className="h-[300px] w-full mt-4">
            <ResponsiveContainer width="100%" height="100%">
              <RechartsAreaChart
                data={chartData}
                margin={{ top: 20, right: 20, left: 20, bottom: 20 }}
              >
                <defs>
                  <linearGradient id="detailStockGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#3984A3" stopOpacity={0.3} />
                    <stop offset="95%" stopColor="#3984A3" stopOpacity={0} />
                  </linearGradient>
                </defs>
                <XAxis
                  dataKey="date"
                  tickLine={false}
                  axisLine={false}
                />
                <YAxis
                  tickLine={false}
                  axisLine={false}
                  domain={[0, 'dataMax + 50']}
                />
                <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#f0f0f0" />
                <Tooltip
                  contentStyle={{
                    borderRadius: "8px",
                    border: "none",
                    boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                  }}
                />
                <Area
                  type="monotone"
                  dataKey="stock"
                  name={`Stock (${ingredient.unit})`}
                  stroke="#3984A3"
                  fillOpacity={1}
                  fill="url(#detailStockGradient)"
                />
              </RechartsAreaChart>
            </ResponsiveContainer>
          </div>

          <div className="mt-2 bg-muted rounded-md p-4">
            <h4 className="text-sm font-medium mb-2">Stock Level Details</h4>
            <div className="grid grid-cols-2 gap-x-4 gap-y-2 text-sm">
              {ingredient.history.map((item, index) => (
                <div key={index} className="flex justify-between">
                  <span className="text-muted-foreground">
                    {new Date(item.date).toLocaleDateString()}:
                  </span>
                  <span className="font-medium">
                    {item.level} {ingredient.unit}
                  </span>
                </div>
              ))}
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Delete Ingredient</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete {ingredient.name}? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setDeleteDialogOpen(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleConfirmDelete}>
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default IngredientCard;

================
File: src/components/Planning/NewScheduleForm.tsx
================
import React, { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Plus, Edit, MoreVertical } from "lucide-react";

const NewScheduleForm: React.FC = () => {
  return (
    <div className="w-[450px] border-r border-gray-200 p-6">
      <h2 className="text-xl font-bold mb-4">New Schedule</h2>

      <div className="mb-6">
        <Input
          type="text"
          placeholder="Title"
          className="border-gray-300 focus:border-black focus:ring-0"
        />
      </div>

      <div className="mb-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">Employees</h3>
          <Button variant="ghost" size="sm" className="p-1">
            <Plus className="w-5 h-5" />
          </Button>
        </div>

        <div className="space-y-2">
          <EmployeeItem
            name="Maria T."
            status="Reg. Hours"
            avatarColor="bg-purple-400"
          />
          <EmployeeItem
            name="John H."
            status="Reg. Hours"
            avatarColor="bg-blue-400"
          />
          <EmployeeItem
            name="Mark F."
            status="Reg. Hours"
            avatarColor="bg-teal-400"
          />
        </div>
      </div>

      <div className="mb-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">Machines</h3>
          <Button variant="ghost" size="sm" className="p-1">
            <Plus className="w-5 h-5" />
          </Button>
        </div>

        <div className="space-y-2">
          <MachineItem name="Machine 1" capacity="8 Gallon" />
          <MachineItem name="Machine 1" capacity="4 Gallon" />
          <MachineItem name="Machine 1" capacity="4 Gallon" />
          <MachineItem name="Machine 1" capacity="2 Gallon" />
        </div>
      </div>

      <div className="mb-8">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">Product</h3>
          <Button variant="ghost" size="sm" className="p-1">
            <Edit className="w-5 h-5" />
          </Button>
        </div>

        <div className="flex items-center justify-between p-3 border border-gray-200 rounded-md">
          <div className="text-sm font-medium">Caramel Crack</div>
          <div className="text-sm text-gray-500">4 Tubs</div>
        </div>
      </div>

      <div className="flex space-x-3">
        <Button className="flex-1 bg-black hover:bg-gray-800">Save</Button>
        <Button className="flex-1 bg-purple-500 hover:bg-purple-600">
          Generate
        </Button>
      </div>
    </div>
  );
};

type EmployeeItemProps = {
  name: string;
  status: string;
  avatarColor: string;
};

const EmployeeItem: React.FC<EmployeeItemProps> = ({
  name,
  status,
  avatarColor,
}) => {
  return (
    <div className="flex items-center justify-between p-3 border border-gray-200 rounded-md">
      <div className="flex items-center">
        <div
          className={`w-8 h-8 rounded-full ${avatarColor} flex items-center justify-center text-white mr-3`}
        >
          {name.charAt(0)}
        </div>
        <div>
          <div className="text-sm font-medium">{name}</div>
          <div className="text-xs text-gray-500">{status}</div>
        </div>
      </div>
      <Button variant="ghost" size="icon" className="h-8 w-8">
        <MoreVertical className="w-4 h-4" />
      </Button>
    </div>
  );
};

type MachineItemProps = {
  name: string;
  capacity: string;
};

const MachineItem: React.FC<MachineItemProps> = ({ name, capacity }) => {
  return (
    <div className="flex items-center justify-between p-3 border border-gray-200 rounded-md">
      <div className="flex items-center">
        <div className="w-8 h-8 flex items-center justify-center mr-3">
          <svg
            viewBox="0 0 24 24"
            width="24"
            height="24"
            stroke="currentColor"
            strokeWidth="2"
            fill="none"
            strokeLinecap="round"
            strokeLinejoin="round"
          >
            <rect x="4" y="2" width="16" height="20" rx="2" ry="2"></rect>
            <line x1="12" y1="6" x2="12" y2="10"></line>
            <line x1="12" y1="14" x2="12" y2="18"></line>
          </svg>
        </div>
        <div>
          <div className="text-sm font-medium">{name}</div>
          <div className="text-xs text-gray-500">{capacity}</div>
        </div>
      </div>
      <Button variant="ghost" size="icon" className="h-8 w-8">
        <MoreVertical className="w-4 h-4" />
      </Button>
    </div>
  );
};

export default NewScheduleForm;

================
File: src/components/Planning/ProductionSchedule.tsx
================
import React, { useState } from "react";
import { Share2, ChevronDown } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";

// Mock data for the schedule
const dateOptions = [
  "Monday, 3/31",
  "Tuesday, 4/1",
  "Wednesday, 4/2",
  "Thursday, 4/3",
  "Friday, 4/4",
];

const machines = [
  "Machine 1",
  "Machine 2",
  "Machine 3",
  "Machine 4",
  "Machine 5",
];
const hours = [
  "9AM",
  "10AM",
  "11AM",
  "12PM",
  "1PM",
  "2PM",
  "3PM",
  "4PM",
  "5PM",
  "6PM",
  "7PM",
  "8PM",
  "9PM",
  "10PM",
];

// Mock employee data
const employees = [
  { id: 1, name: "John Smith", color: "bg-purple-400" },
  { id: 2, name: "Emma Davis", color: "bg-blue-400" },
  { id: 3, name: "Michael Chen", color: "bg-teal-400" },
  { id: 4, name: "Sarah Johnson", color: "bg-amber-400" },
  { id: 5, name: "David Wilson", color: "bg-red-400" },
  { id: 6, name: "Lisa Garcia", color: "bg-green-400" },
];

// Updated tasks data with more entries
const tasks = [
  {
    id: 1,
    employeeId: 1,
    startHour: 0, // 9AM
    duration: 2,
    machineIndex: 0,
    date: "Monday, 3/31",
  },
  {
    id: 2,
    employeeId: 2,
    startHour: 1, // 10AM
    duration: 3,
    machineIndex: 1,
    date: "Tuesday, 4/1",
  },
  {
    id: 3,
    employeeId: 3,
    startHour: 2, // 11AM
    duration: 3,
    machineIndex: 2,
    date: "Wednesday, 4/2",
  },
  {
    id: 4,
    employeeId: 3,
    startHour: 4, // 1PM
    duration: 2,
    machineIndex: 2,
    date: "Wednesday, 4/2",
  },
  {
    id: 5,
    employeeId: 4,
    startHour: 5, // 2PM
    duration: 4,
    machineIndex: 3,
    date: "Wednesday, 4/2",
  },
  {
    id: 6,
    employeeId: 1,
    startHour: 0, // 9AM
    duration: 3,
    machineIndex: 4,
    date: "Thursday, 4/3",
  },
  // Additional tasks for Monday
  {
    id: 7,
    employeeId: 5,
    startHour: 3, // 12PM
    duration: 3,
    machineIndex: 2,
    date: "Monday, 3/31",
  },
  {
    id: 8,
    employeeId: 6,
    startHour: 1, // 10AM
    duration: 4,
    machineIndex: 3,
    date: "Monday, 3/31",
  },
  {
    id: 9,
    employeeId: 2,
    startHour: 6, // 3PM
    duration: 3,
    machineIndex: 4,
    date: "Monday, 3/31",
  },
  // Additional tasks for Tuesday
  {
    id: 10,
    employeeId: 4,
    startHour: 5, // 2PM
    duration: 2,
    machineIndex: 0,
    date: "Tuesday, 4/1",
  },
  {
    id: 11,
    employeeId: 5,
    startHour: 7, // 4PM
    duration: 3,
    machineIndex: 3,
    date: "Tuesday, 4/1",
  },
  // Additional tasks for Friday
  {
    id: 12,
    employeeId: 6,
    startHour: 2, // 11AM
    duration: 5,
    machineIndex: 1,
    date: "Friday, 4/4",
  },
  {
    id: 13,
    employeeId: 3,
    startHour: 8, // 5PM
    duration: 2,
    machineIndex: 0,
    date: "Friday, 4/4",
  },
];

const ProductionSchedule: React.FC = () => {
  const [selectedDate, setSelectedDate] = useState(dateOptions[0]);

  // Get the employee color based on employeeId
  const getEmployeeColor = (employeeId: number) => {
    const employee = employees.find((emp) => emp.id === employeeId);
    return employee ? employee.color : "bg-gray-400";
  };

  // Get the employee name based on employeeId
  const getEmployeeName = (employeeId: number) => {
    const employee = employees.find((emp) => emp.id === employeeId);
    return employee ? employee.name : "Unknown";
  };

  // Filter tasks by selected date
  const filteredTasks = tasks.filter((task) => task.date === selectedDate);

  return (
    <div className="flex-1 overflow-hidden">
      <div className="p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold flex items-center">
            Caramel Crack Production Schedule
            <button className="ml-2 p-1 text-gray-500 hover:text-gray-700">
              <Share2 className="w-5 h-5" />
            </button>
          </h2>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="flex items-center gap-2">
                {selectedDate}
                <ChevronDown className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56">
              {dateOptions.map((date, index) => (
                <DropdownMenuItem
                  key={index}
                  onClick={() => setSelectedDate(date)}
                  className="cursor-pointer"
                >
                  {date}
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>

        <div className="flex border-b border-gray-200 pb-2">
          <div className="w-16"></div> {/* Empty space for time labels */}
          {machines.map((machine, index) => (
            <div key={index} className="flex-1 text-center font-medium">
              {machine}
            </div>
          ))}
        </div>

        <div
          className="relative overflow-y-auto"
          style={{ height: "calc(100vh - 240px)" }}
        >
          {hours.map((hour, hourIndex) => (
            <div key={hourIndex} className="flex border-b border-gray-100">
              <div className="w-16 py-4 pr-4 text-right text-sm text-gray-500 sticky left-0 bg-white">
                {hour}
              </div>

              {machines.map((_, machineIndex) => (
                <div
                  key={`${hourIndex}-${machineIndex}`}
                  className="flex-1 h-10 border-l border-gray-100 relative"
                >
                  {filteredTasks
                    .filter(
                      (task) =>
                        task.machineIndex === machineIndex &&
                        task.startHour === hourIndex
                    )
                    .map((task) => (
                      <div
                        key={task.id}
                        className={`absolute w-[95%] rounded-md ${getEmployeeColor(
                          task.employeeId
                        )} group`}
                        style={{
                          height: `${task.duration * 40}px`,
                          top: 0,
                          left: "2.5%",
                        }}
                      >
                        <div className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 bg-black bg-opacity-30 text-white text-xs font-medium transition-opacity rounded-md">
                          {getEmployeeName(task.employeeId)}
                        </div>
                      </div>
                    ))}
                </div>
              ))}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ProductionSchedule;

================
File: src/components/Planning/ScheduleHeader.tsx
================
import React from "react";
import { Share2 } from "lucide-react";
import { Button } from "@/components/ui/button";

type ScheduleHeaderProps = {
  title: string;
};

const ScheduleHeader: React.FC<ScheduleHeaderProps> = ({ title }) => {
  return (
    <div className="flex justify-between items-center py-4 px-6 border-b border-gray-200">
      <h1 className="text-2xl font-bold">{title}</h1>
      <div className="flex space-x-2">
        <Button
          variant="outline"
          className="bg-purple-100 text-purple-600 border-purple-200 hover:bg-purple-200"
        >
          Load Schedule
        </Button>
        <Button className="bg-black text-white hover:bg-gray-800">
          New Schedule
        </Button>
      </div>
    </div>
  );
};

export default ScheduleHeader;

================
File: src/components/Recipe/AddRecipeModal.tsx
================
import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Plus, Trash } from "lucide-react";
import { Ingredient, Recipe } from "@/lib/data";
import { toast } from "sonner";

interface RecipeIngredient {
  ingredientId: string;
  amount: number;
}

interface AddRecipeModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onAddRecipe: (values: {
    name: string;
    ingredients: RecipeIngredient[];
  }) => void;
  availableIngredients: Ingredient[];
  editingRecipe?: Recipe | null;
}

export const AddRecipeModal: React.FC<AddRecipeModalProps> = ({
  open,
  onOpenChange,
  onAddRecipe,
  availableIngredients,
  editingRecipe,
}) => {
  const [name, setName] = useState("");
  const [ingredients, setIngredients] = useState<RecipeIngredient[]>([]);
  const [searchQuery, setSearchQuery] = useState("");

  // Reset form when opening modal or switching recipes
  useEffect(() => {
    if (editingRecipe) {
      setName(editingRecipe.name);
      // Remove any duplicate ingredients that might exist in the data
      const uniqueIngredients = editingRecipe.ingredients.reduce((acc, curr) => {
        if (!acc.some(item => item.ingredientId === curr.ingredientId)) {
          acc.push(curr);
        }
        return acc;
      }, [] as RecipeIngredient[]);
      
      if (uniqueIngredients.length !== editingRecipe.ingredients.length) {
        toast.warning("Duplicate ingredients were removed from the recipe");
      }
      setIngredients(uniqueIngredients);
    } else {
      setName("");
      setIngredients([]);
    }
  }, [editingRecipe, open]);

  const handleAddIngredient = () => {
    setIngredients([...ingredients, { ingredientId: "", amount: 0 }]);
  };

  const handleRemoveIngredient = (index: number) => {
    setIngredients(ingredients.filter((_, i) => i !== index));
  };

  const handleIngredientChange = (index: number, field: keyof RecipeIngredient, value: string | number) => {
    const newIngredients = [...ingredients];
    
    if (field === "ingredientId" && typeof value === "string") {
      // Check if this ingredient is already used in another slot
      const isDuplicate = ingredients.some(
        (ing, i) => i !== index && ing.ingredientId === value
      );
      
      if (isDuplicate) {
        toast.error("This ingredient is already added to the recipe");
        return;
      }
    }
    
    newIngredients[index] = {
      ...newIngredients[index],
      [field]: value,
    };
    setIngredients(newIngredients);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    // Validate name
    if (!name.trim()) {
      toast.error("Recipe name is required");
      return;
    }

    // Validate ingredients
    for (const ing of ingredients) {
      if (!ing.ingredientId) {
        toast.error("Please select an ingredient for all recipe items");
        return;
      }
      if (ing.amount <= 0) {
        toast.error("Amount must be greater than 0 for all ingredients");
        return;
      }
    }

    onAddRecipe({
      name: name.trim(),
      ingredients: ingredients.map(ing => ({
        ...ing,
        amount: parseFloat(ing.amount.toString())
      })),
    });
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>{editingRecipe ? 'Edit Recipe' : 'Add New Recipe'}</DialogTitle>
          <DialogDescription>
            {editingRecipe ? 'Edit the recipe details and its ingredients.' : 'Enter the recipe details and its required ingredients.'}
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-6 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                className="col-span-3"
                required
              />
            </div>

            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <Label>Ingredients</Label>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={handleAddIngredient}
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Ingredient
                </Button>
              </div>

              {ingredients.map((ingredient, index) => (
                <div key={index} className="grid grid-cols-12 gap-4 items-center">
                  <div className="col-span-6">
                    <Select
                      value={ingredient.ingredientId}
                      onValueChange={(value) =>
                        handleIngredientChange(index, "ingredientId", value)
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select ingredient" />
                      </SelectTrigger>
                      <SelectContent>
                        <div className="sticky top-0 p-2 bg-white border-b">
                          <Input
                            placeholder="Search ingredients..."
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                            className="h-8"
                          />
                        </div>
                        {availableIngredients
                          .filter((ing) =>
                            ing.name.toLowerCase().includes(searchQuery.toLowerCase())
                          )
                          .map((ing) => {
                            const isSelected = ingredients.some(
                              (i) => i.ingredientId === ing._id && i !== ingredient
                            );
                            return (
                              <SelectItem 
                                key={ing._id} 
                                value={ing._id}
                                disabled={isSelected}
                                className={isSelected ? "opacity-50" : ""}
                              >
                                {ing.name} ({ing.unit})
                                {isSelected && " - Already added"}
                              </SelectItem>
                            );
                          })}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="col-span-4">
                    <Input
                      type="number"
                      value={ingredient.amount || ""}
                      onChange={(e) =>
                        handleIngredientChange(
                          index,
                          "amount",
                          parseFloat(e.target.value) || 0
                        )
                      }
                      step="0.001"
                      min="0"
                      placeholder="Amount"
                      className="w-24"
                    />
                  </div>
                  <div className="col-span-2">
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      onClick={() => handleRemoveIngredient(index)}
                    >
                      <Trash className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <DialogFooter>
            <Button 
              type="submit"
              disabled={name.trim() === "" || ingredients.length === 0}
            >
              {editingRecipe ? 'Save Changes' : 'Add Recipe'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

================
File: src/components/Recipes/RecipeCard.tsx
================
import React, { useState } from "react";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Recipe, Ingredient } from "@/lib/data";
import { cn } from "@/lib/utils";
import { History, Info, Users, Edit } from "lucide-react";
import { Badge } from "@/components/ui/badge";

interface RecipeCardProps {
  recipe: Recipe;
  className?: string;
  ingredients: Ingredient[];
  onEdit?: (recipe: Recipe) => void;
}

export const RecipeCard: React.FC<RecipeCardProps> = ({
  recipe,
  className,
  ingredients,
  onEdit,
}) => {
  const [flipped, setFlipped] = useState(false);

  const toggleFlip = () => {
    setFlipped(!flipped);
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    onEdit?.(recipe);
  };

  // Get color based on recipe name
  const getRecipeColor = () => {
    switch (recipe.name.toLowerCase()) {
      case "vanilla":
        return "vanilla";
      case "chocolate":
        return "chocolate";
      case "strawberry":
        return "strawberry";
      case "cookie dough":
        return "cookie";
      case "rocky road":
        return "rocky";
      default:
        return "ice";
    }
  };

  const color = getRecipeColor();
  const lastBatch = recipe.batches[recipe.batches.length - 1];

  return (
    <div className={cn("perspective-1000 h-full", className)}>
      <div
        className={cn(
          "relative w-full h-full transition-transform duration-500 preserve-3d cursor-pointer",
          flipped ? "rotate-y-180" : ""
        )}
        onClick={toggleFlip}
      >
        {/* Front Side - Ingredients */}
        <Card
          className={cn(
            "absolute w-full h-full backface-hidden hover-scale",
            `bg-${color}/40 border-${color}/60`
          )}
        >
          <CardHeader className="pb-2">
            <div className="flex justify-between items-center">
              <CardTitle className={`text-${color}-foreground`}>
                {recipe.name}
              </CardTitle>
              <Button
                variant="ghost"
                size="icon"
                className={`h-8 w-8 text-${color}-foreground/70 hover:text-${color}-foreground hover:bg-${color}/60`}
                onClick={handleEdit}
              >
                <Edit size={16} />
              </Button>
            </div>
          </CardHeader>
          <CardContent className="pb-2">
            <h4 className={`text-sm font-medium mb-2 text-${color}-foreground/80`}>
              Ingredients
            </h4>
            <ul className="space-y-1 text-sm">
              {recipe.ingredients.map((item) => {
                const ingredient = ingredients.find(i => i._id === item.ingredientId);
                return (
                  ingredient && (
                    <li
                      key={item.ingredientId}
                      className="flex justify-between items-center"
                    >
                      <span className={`text-${color}-foreground/70`}>
                        {ingredient.name}:
                      </span>
                      <span className={`font-medium text-${color}-foreground`}>
                        {item.amount} {ingredient.unit}
                      </span>
                    </li>
                  )
                );
              })}
            </ul>
          </CardContent>
          <CardFooter className="flex justify-center pt-2">
            <Button
              variant="ghost"
              size="sm"
              className={`text-xs p-1 h-6 text-${color}-foreground/70 hover:text-${color}-foreground hover:bg-${color}/60`}
              onClick={toggleFlip}
            >
              <History size={14} className="mr-1" /> Batch History
            </Button>
          </CardFooter>
        </Card>

        {/* Back Side - Batch History */}
        <Card
          className={cn(
            "absolute w-full h-full backface-hidden rotate-y-180 hover-scale",
            `bg-${color}/40 border-${color}/60`
          )}
        >
          <CardHeader className="pb-2">
            <div className="flex justify-between items-center">
              <CardTitle className={`text-${color}-foreground`}>
                {recipe.name} <span className="text-base font-normal">History</span>
              </CardTitle>
              <Button
                variant="ghost"
                size="icon"
                className={`h-8 w-8 text-${color}-foreground/70 hover:text-${color}-foreground hover:bg-${color}/60`}
                onClick={handleEdit}
              >
                <Edit size={16} />
              </Button>
            </div>
          </CardHeader>
          <CardContent className="pb-2">
            <h4 className={`text-sm font-medium mb-2 text-${color}-foreground/80`}>
              Recent Batches
            </h4>
            <ul className="space-y-3 text-sm">
              {recipe.batches.map((batch, index) => (
                <li key={index} className="space-y-1">
                  <div className="flex justify-between items-center">
                    <Badge
                      variant="outline"
                      className={`text-${color}-foreground border-${color}-foreground/30 bg-${color}/30`}
                    >
                      {new Date(batch.date).toLocaleDateString()}
                    </Badge>
                    <span className={`font-medium text-${color}-foreground`}>
                      {batch.quantity} units
                    </span>
                  </div>
                  <div className="flex items-center gap-1 text-xs text-muted-foreground">
                    <Users size={12} />
                    <span>{batch.supervisor}</span>
                  </div>
                  {batch.notes && (
                    <div className="flex items-start gap-1 text-xs text-muted-foreground mt-1">
                      <Info size={12} className="mt-0.5" />
                      <span>{batch.notes}</span>
                    </div>
                  )}
                </li>
              ))}
            </ul>
          </CardContent>
          <CardFooter className="flex justify-center pt-2">
            <Button
              variant="ghost"
              size="sm"
              className={`text-xs p-1 h-6 text-${color}-foreground/70 hover:text-${color}-foreground hover:bg-${color}/60`}
              onClick={toggleFlip}
            >
              <Info size={14} className="mr-1" /> Ingredients
            </Button>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
};

export default RecipeCard;

================
File: src/components/ui/accordion.tsx
================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: src/components/ui/alert-dialog.tsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: src/components/ui/aspect-ratio.tsx
================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: src/components/ui/avatar.tsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: src/components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/calendar.tsx
================
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/carousel.tsx
================
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: src/components/ui/chart.tsx
================
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: src/components/ui/checkbox.tsx
================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: src/components/ui/CircularGauge.tsx
================
import React from "react";
import { cn } from "@/lib/utils";

interface CircularGaugeProps {
  value: number;
  maxValue: number;
  size?: number;
  thickness?: number;
  className?: string;
  colorByValue?: boolean;
  showValue?: boolean;
  label?: string;
  valueFormatter?: (value: number) => string;
}

export const CircularGauge: React.FC<CircularGaugeProps> = ({
  value,
  maxValue,
  size = 120,
  thickness = 8,
  className,
  colorByValue = true,
  showValue = true,
  label,
  valueFormatter,
}) => {
  const percentage = Math.min(100, Math.max(0, (value / maxValue) * 100));
  const radius = (size - thickness) / 2;
  const circumference = 2 * Math.PI * radius;
  const strokeDashoffset = circumference - (percentage / 100) * circumference;

  const getColor = () => {
    if (!colorByValue) return "stroke-primary";
    if (percentage <= 25) return "stroke-destructive";
    if (percentage <= 50) return "stroke-orange-500";
    if (percentage <= 75) return "stroke-yellow-500";
    return "stroke-emerald-500";
  };

  const formattedValue = valueFormatter ? valueFormatter(value) : value.toString();

  return (
    <div className={cn("relative flex flex-col items-center justify-center", className)}>
      <svg width={size} height={size} className="transform -rotate-90">
        {/* Background circle */}
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          fill="none"
          strokeWidth={thickness}
          className="stroke-muted"
        />
        
        {/* Foreground circle */}
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          fill="none"
          strokeWidth={thickness}
          strokeDasharray={circumference}
          strokeDashoffset={strokeDashoffset}
          strokeLinecap="round"
          className={cn("transition-all duration-500 ease-out", getColor())}
        />
      </svg>
      
      {/* Center content */}
      <div className="absolute inset-0 flex flex-col items-center justify-center text-center">
        {showValue && (
          <span className="text-lg font-medium">
            {formattedValue}
          </span>
        )}
        {label && (
          <span className="text-xs text-muted-foreground">
            {label}
          </span>
        )}
      </div>
    </div>
  );
};

export default CircularGauge;

================
File: src/components/ui/collapsible.tsx
================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: src/components/ui/command.tsx
================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: src/components/ui/context-menu.tsx
================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: src/components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/drawer.tsx
================
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: src/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/form.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/hover-card.tsx
================
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: src/components/ui/input-otp.tsx
================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/menubar.tsx
================
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: src/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: src/components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: src/components/ui/popover.tsx
================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: src/components/ui/progress.tsx
================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: src/components/ui/radio-group.tsx
================
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: src/components/ui/resizable.tsx
================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: src/components/ui/scroll-area.tsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: src/components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/separator.tsx
================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: src/components/ui/sheet.tsx
================
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}

================
File: src/components/ui/sidebar.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: src/components/ui/slider.tsx
================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: src/components/ui/sonner.tsx
================
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: src/components/ui/switch.tsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: src/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: src/components/ui/tabs.tsx
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: src/components/ui/toast.tsx
================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/components/ui/toaster.tsx
================
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/ui/toggle-group.tsx
================
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: src/components/ui/toggle.tsx
================
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: src/components/ui/tooltip.tsx
================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/components/ui/TooltipWrapper.tsx
================
import React from "react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface TooltipWrapperProps {
  content: React.ReactNode;
  children: React.ReactNode;
}

export const TooltipWrapper: React.FC<TooltipWrapperProps> = ({
  content,
  children,
}) => {
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          {children}
        </TooltipTrigger>
        <TooltipContent>
          {content}
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

export default TooltipWrapper;

================
File: src/components/ui/use-toast.ts
================
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };

================
File: src/components/Layout.tsx
================
import React from "react";
import { Navbar } from "@/components/Navbar";
import { cn } from "@/lib/utils";

interface LayoutProps {
  children: React.ReactNode;
  className?: string;
}

export const Layout: React.FC<LayoutProps> = ({ children, className }) => {
  return (
    <div className="min-h-screen bg-background">
      <Navbar />
      <main className={cn("container px-4 py-6 pb-16 animate-fade-in", className)}>
        {children}
      </main>
    </div>
  );
};

export default Layout;

================
File: src/components/Navbar.tsx
================
import React from "react";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { cn } from "@/lib/utils";
import {
  BarChart3,
  Package,
  ClipboardList,
  ShoppingCart,
  UtensilsCrossed,
  MenuIcon,
  X,
  LogOut,
  Calendar,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { useAuth } from "@/context/AuthContext";

interface NavItem {
  name: string;
  path: string;
  icon: React.ElementType;
}

const navItems: NavItem[] = [
  { name: "Dashboard", path: "/", icon: BarChart3 },
  { name: "Inventory", path: "/inventory", icon: Package },
  { name: "Recipes", path: "/recipes", icon: UtensilsCrossed },
  { name: "Production", path: "/production", icon: ClipboardList },
  { name: "Ordering", path: "/ordering", icon: ShoppingCart },
  { name: "Planning", path: "/planning", icon: Calendar },
];

export const Navbar: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { isAuthenticated, username, logout } = useAuth();
  const [mobileMenuOpen, setMobileMenuOpen] = React.useState(false);

  const toggleMobileMenu = () => {
    setMobileMenuOpen((prev) => !prev);
  };

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  return (
    <>
      <header className="fixed top-0 left-0 right-0 z-50 glass-card h-16 border-b border-border/40 backdrop-blur-lg">
        <div className="container flex h-full items-center justify-between px-4">
          <div className="flex items-center gap-4">
            <Link to="/" className="flex items-center gap-2">
              <span className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary to-blue-700">
                Batchr
              </span>
              <div className="flex items-center justify-center rounded-full bg-primary w-6 h-6 text-white text-xs font-bold">
                β
              </div>
            </Link>
            {isAuthenticated ? (
              <div className="flex items-center gap-2">
                <span className="text-sm text-muted-foreground">
                  {username}
                </span>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleLogout}
                  className="gap-2"
                >
                  <LogOut className="h-4 w-4" />
                  Logout
                </Button>
              </div>
            ) : (
              <div className="flex items-center gap-2">
                <Button variant="ghost" size="sm" asChild>
                  <Link to="/login">Login</Link>
                </Button>
                <Button size="sm" asChild>
                  <Link to="/register">Sign Up</Link>
                </Button>
              </div>
            )}
          </div>

          {/* Desktop Nav */}
          <nav className="hidden md:flex items-center space-x-1">
            {navItems.map((item) => {
              const isActive = location.pathname === item.path;
              const Icon = item.icon;

              return (
                <Link
                  key={item.name}
                  to={item.path}
                  className={cn(
                    "flex items-center gap-1.5 px-3 py-2 rounded-md text-sm font-medium transition-colors",
                    isActive
                      ? "bg-accent text-accent-foreground"
                      : "text-muted-foreground hover:bg-accent hover:text-accent-foreground"
                  )}
                >
                  <Icon size={16} />
                  {item.name}
                </Link>
              );
            })}
          </nav>

          {/* Mobile Menu Button */}
          <Button
            variant="ghost"
            size="icon"
            className="md:hidden"
            onClick={toggleMobileMenu}
            aria-label="Toggle Menu"
          >
            {mobileMenuOpen ? <X size={20} /> : <MenuIcon size={20} />}
          </Button>
        </div>
      </header>

      {/* Mobile Menu */}
      {mobileMenuOpen && (
        <div className="fixed inset-0 z-40 transform md:hidden animate-fade-in pt-16">
          <div
            className="absolute inset-0 bg-background/95 backdrop-blur-sm"
            onClick={toggleMobileMenu}
          />
          <nav className="relative bg-card p-6 h-full">
            <div className="flex flex-col space-y-2">
              {navItems.map((item) => {
                const isActive = location.pathname === item.path;
                const Icon = item.icon;

                return (
                  <Link
                    key={item.name}
                    to={item.path}
                    className={cn(
                      "flex items-center gap-3 px-4 py-3 rounded-md text-base font-medium transition-colors",
                      isActive
                        ? "bg-accent text-accent-foreground"
                        : "text-muted-foreground hover:bg-accent hover:text-accent-foreground"
                    )}
                    onClick={toggleMobileMenu}
                  >
                    <Icon size={20} />
                    {item.name}
                  </Link>
                );
              })}
            </div>
          </nav>
        </div>
      )}

      {/* Spacer for fixed header */}
      <div className="h-16" />
    </>
  );
};

export default Navbar;

================
File: src/components/UnitConverter.tsx
================
import React, { useState, useEffect } from "react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  unitCategories,
  convertUnits,
  UnitDefinition,
  UnitCategoryType,
  UnitCategoryDefinition,
} from "@/lib/units";

interface UnitConverterProps {
  category?: UnitCategoryType;
  initialUnit?: string;
  value?: number;
  onUnitChange?: (unit: string) => void;
  onValueChange?: (value: number) => void;
  showConverter?: boolean;
}

export const UnitConverter: React.FC<UnitConverterProps> = ({
  category,
  initialUnit,
  value = 0,
  onUnitChange,
  onValueChange,
  showConverter = false,
}) => {
  const [selectedCategory, setSelectedCategory] = useState<UnitCategoryType>(
    category || "dairy_liquid"
  );
  const [fromUnit, setFromUnit] = useState<string>(initialUnit || "");
  const [toUnit, setToUnit] = useState<string>("");
  const [fromValue, setFromValue] = useState<number>(value);
  const [toValue, setToValue] = useState<number>(0);

  // Get available units for the selected category
  const getUnitsForCategory = (
    categoryType: UnitCategoryType
  ): UnitDefinition[] => {
    const category = unitCategories.find((c) => c.type === categoryType);
    return category ? category.units : [];
  };

  // Update conversion when values change
  useEffect(() => {
    if (fromUnit && toUnit && fromValue) {
      const converted = convertUnits(fromValue, fromUnit, toUnit);
      if (converted !== null) {
        setToValue(Number(converted.toFixed(3)));
      }
    }
  }, [fromUnit, toUnit, fromValue]);

  // Handle unit selection
  const handleUnitChange = (unit: string) => {
    setFromUnit(unit);
    if (onUnitChange) {
      onUnitChange(unit);
    }
  };

  // Handle value input
  const handleValueChange = (value: number) => {
    setFromValue(value);
    if (onValueChange) {
      onValueChange(value);
    }
  };

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label>Category</Label>
          <Select
            value={selectedCategory}
            onValueChange={(value: UnitCategoryType) =>
              setSelectedCategory(value)
            }
          >
            <SelectTrigger>
              <SelectValue placeholder="Select category" />
            </SelectTrigger>
            <SelectContent>
              {unitCategories.map((category) => (
                <SelectItem key={category.type} value={category.type}>
                  {category.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="space-y-2">
          <Label>Unit</Label>
          <Select value={fromUnit} onValueChange={handleUnitChange}>
            <SelectTrigger>
              <SelectValue placeholder="Select unit" />
            </SelectTrigger>
            <SelectContent>
              {getUnitsForCategory(selectedCategory).map((unit) => (
                <SelectItem key={unit.symbol} value={unit.symbol}>
                  {unit.name} ({unit.symbol})
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      {showConverter && (
        <div className="border rounded-lg p-4 mt-4 space-y-4">
          <h3 className="font-medium">Convert Units</h3>
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>From</Label>
              <div className="flex gap-2">
                <Input
                  type="number"
                  value={fromValue}
                  onChange={(e) => setFromValue(Number(e.target.value))}
                  className="flex-1"
                />
                <span className="py-2 px-3 bg-muted rounded text-sm">
                  {fromUnit}
                </span>
              </div>
            </div>
            <div className="space-y-2">
              <Label>To</Label>
              <div className="flex gap-2">
                <Select value={toUnit} onValueChange={setToUnit}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select unit" />
                  </SelectTrigger>
                  <SelectContent>
                    {getUnitsForCategory(selectedCategory).map((unit) => (
                      <SelectItem key={unit.symbol} value={unit.symbol}>
                        {unit.name} ({unit.symbol})
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {toUnit && (
                  <div className="py-2 px-3 bg-muted rounded text-sm min-w-[100px] text-left">
                    {toValue} {toUnit}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

================
File: src/context/AuthContext.tsx
================
import React, { createContext, useContext, useEffect, useState } from "react";

interface AuthContextType {
  user: string | null;
  isAuthenticated: boolean;
  username: string | null;
  login: (username: string) => void;
  logout: () => void;
  loading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [retryCount, setRetryCount] = useState(0);
  const MAX_RETRIES = 3;

  const checkSession = async () => {
    try {
      const res = await fetch(`${import.meta.env.VITE_API_URL}/api/auth/session`, {
        credentials: "include",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
        },
      });

      if (!res.ok) {
        if (res.status === 401) {
          setUser(null);
          return;
        }
        
        // If we get a 500 error and haven't exceeded retries, try again
        if (res.status === 500 && retryCount < MAX_RETRIES) {
          setRetryCount(prev => prev + 1);
          setTimeout(checkSession, 1000 * Math.pow(2, retryCount)); // Exponential backoff
          return;
        }
        
        throw new Error('Session check failed');
      }

      const contentType = res.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        throw new Error('Invalid response type');
      }

      const data = await res.json();
      if (data?.user?.username) {
        setUser(data.user.username);
      } else {
        setUser(null);
      }
    } catch (error) {
      console.error('Session check error:', error);
      
      // If we haven't exceeded retries, try again
      if (retryCount < MAX_RETRIES) {
        setRetryCount(prev => prev + 1);
        setTimeout(checkSession, 1000 * Math.pow(2, retryCount)); // Exponential backoff
      } else {
        setUser(null);
      }
    } finally {
      if (retryCount >= MAX_RETRIES) {
        setLoading(false);
      }
    }
  };

  useEffect(() => {
    checkSession();
  }, []);

  const login = (username: string) => {
    setUser(username);
    setRetryCount(0); // Reset retry count on successful login
  };

  const logout = async () => {
    try {
      await fetch(`${import.meta.env.VITE_API_URL}/api/auth/logout`, {
        method: 'POST',
        credentials: 'include',
      });
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      setUser(null);
      setRetryCount(0);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        username: user,
        login,
        logout,
        loading,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthContext;

================
File: src/hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: src/hooks/use-toast.ts
================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: src/lib/data.ts
================
import { UnitCategoryType } from "./units";

export interface Ingredient {
  _id: string;
  name: string;
  stock: number;
  unit: string;
  unitCategory?: UnitCategoryType;
  threshold: number;
  minimumOrderQuantity?: number;
  supplierId?: string;
  upc?: string;
  history: {
    date: string;
    level: number;
  }[];
  owner?: string;
}

export interface Recipe {
  _id: string;
  name: string;
  ingredients: {
    ingredientId: string;
    amount: number;
  }[];
  batches: {
    date: string;
    supervisor: string;
    quantity: number;
    notes?: string;
  }[];
  owner?: string;
}

export interface Supplier {
  _id: string;
  name: string;
  email: string;
  phone: string;
  rating: number;
  preferred: boolean;
  supplierLink?: string;
  minimumOrderRequirements?: {
    quantity: number;
    unit: string;
    value?: number;
  };
  leadTime?: number; // in days
}

export interface OrderItem {
  ingredientId: string;
  ingredient: Ingredient;
  quantity: number;
  unit: string;
  supplier?: Supplier;
  minimumOrderQuantity?: number;
}

export interface Order {
  id: string;
  supplierId: string;
  supplier?: Supplier;
  items: OrderItem[];
  status: "pending" | "ordered" | "partial" | "received";
  orderDate: string;
  expectedDeliveryDate?: string;
  receivedDate?: string;
  packingSlipNumber?: string;
}

// Generate initial mock data
export const ingredients: Ingredient[] = [
  {
    _id: "1",
    name: "Milk",
    stock: 50,
    unit: "L",
    unitCategory: "dairy_liquid",
    threshold: 10,
    history: [
      { date: "2023-06-01", level: 100 },
      { date: "2023-06-15", level: 90 },
      { date: "2023-07-01", level: 80 },
      { date: "2023-07-15", level: 70 },
      { date: "2023-08-01", level: 50 },
    ],
  },
  {
    _id: "2",
    name: "Sugar",
    stock: 100,
    unit: "kg",
    unitCategory: "dry",
    threshold: 20,
    history: [
      { date: "2023-06-01", level: 200 },
      { date: "2023-06-15", level: 180 },
      { date: "2023-07-01", level: 160 },
      { date: "2023-07-15", level: 140 },
      { date: "2023-08-01", level: 100 },
    ],
  },
  {
    _id: "3",
    name: "Cream",
    stock: 30,
    unit: "L",
    unitCategory: "dairy_liquid",
    threshold: 5,
    history: [
      { date: "2023-06-01", level: 60 },
      { date: "2023-06-15", level: 55 },
      { date: "2023-07-01", level: 50 },
      { date: "2023-07-15", level: 45 },
      { date: "2023-08-01", level: 30 },
    ],
  },
  {
    _id: "4",
    name: "Cocoa Powder",
    stock: 25,
    unit: "kg",
    unitCategory: "dry",
    threshold: 5,
    history: [
      { date: "2023-06-01", level: 50 },
      { date: "2023-06-15", level: 45 },
      { date: "2023-07-01", level: 40 },
      { date: "2023-07-15", level: 35 },
      { date: "2023-08-01", level: 25 },
    ],
  },
  {
    _id: "5",
    name: "Chocolate Chips",
    stock: 40,
    unit: "kg",
    unitCategory: "solid_mixin",
    threshold: 10,
    history: [
      { date: "2023-06-01", level: 80 },
      { date: "2023-06-15", level: 70 },
      { date: "2023-07-01", level: 60 },
      { date: "2023-07-15", level: 50 },
      { date: "2023-08-01", level: 40 },
    ],
  },
  {
    _id: "6",
    name: "Vanilla Extract",
    stock: 15,
    unit: "L",
    unitCategory: "dairy_liquid",
    threshold: 3,
    history: [
      { date: "2023-06-01", level: 30 },
      { date: "2023-06-15", level: 25 },
      { date: "2023-07-01", level: 20 },
      { date: "2023-07-15", level: 15 },
      { date: "2023-08-01", level: 15 },
    ],
  },
  {
    _id: "7",
    name: "Waffle Cones",
    stock: 500,
    unit: "unit",
    unitCategory: "packaging",
    threshold: 100,
    history: [
      { date: "2023-06-01", level: 1000 },
      { date: "2023-06-15", level: 900 },
      { date: "2023-07-01", level: 800 },
      { date: "2023-07-15", level: 700 },
      { date: "2023-08-01", level: 500 },
    ],
  },
  {
    _id: "8",
    name: "Sprinkles",
    stock: 20,
    unit: "kg",
    unitCategory: "solid_mixin",
    threshold: 5,
    history: [
      { date: "2023-06-01", level: 40 },
      { date: "2023-06-15", level: 35 },
      { date: "2023-07-01", level: 30 },
      { date: "2023-07-15", level: 25 },
      { date: "2023-08-01", level: 20 },
    ],
  },
  {
    _id: "9",
    name: "Cookie Dough",
    stock: 30,
    unit: "kg",
    unitCategory: "solid_mixin",
    threshold: 8,
    history: [
      { date: "2023-06-01", level: 60 },
      { date: "2023-06-15", level: 55 },
      { date: "2023-07-01", level: 50 },
      { date: "2023-07-15", level: 45 },
      { date: "2023-08-01", level: 30 },
    ],
  },
  {
    _id: "10",
    name: "Nuts",
    stock: 25,
    unit: "kg",
    unitCategory: "solid_mixin",
    threshold: 5,
    history: [
      { date: "2023-06-01", level: 50 },
      { date: "2023-06-15", level: 45 },
      { date: "2023-07-01", level: 40 },
      { date: "2023-07-15", level: 35 },
      { date: "2023-08-01", level: 25 },
    ],
  },
  {
    _id: "11",
    name: "Ice Cream Cups",
    stock: 1000,
    unit: "unit",
    unitCategory: "packaging",
    threshold: 200,
    history: [
      { date: "2023-06-01", level: 2000 },
      { date: "2023-06-15", level: 1800 },
      { date: "2023-07-01", level: 1600 },
      { date: "2023-07-15", level: 1400 },
      { date: "2023-08-01", level: 1000 },
    ],
  },
  {
    _id: "12",
    name: "Stabilizer",
    stock: 10,
    unit: "kg",
    unitCategory: "dry",
    threshold: 2,
    history: [
      { date: "2023-06-01", level: 20 },
      { date: "2023-06-15", level: 18 },
      { date: "2023-07-01", level: 16 },
      { date: "2023-07-15", level: 14 },
      { date: "2023-08-01", level: 10 },
    ],
  },
];

export const recipes: Recipe[] = [
  {
    _id: "1",
    name: "Vanilla",
    ingredients: [
      { ingredientId: "3", amount: 5 }, // Cream
      { ingredientId: "2", amount: 2 }, // Sugar
      { ingredientId: "6", amount: 0.1 }, // Vanilla Extract
      { ingredientId: "1", amount: 2 }, // Milk
      { ingredientId: "12", amount: 0.05 }, // Stabilizer
    ],
    batches: [
      {
        date: "2023-07-15",
        supervisor: "Jane Smith",
        quantity: 50,
        notes: "Standard batch",
      },
      {
        date: "2023-07-22",
        supervisor: "John Doe",
        quantity: 55,
        notes: "Extra creamy",
      },
    ],
  },
  {
    _id: "2",
    name: "Chocolate",
    ingredients: [
      { ingredientId: "3", amount: 5 }, // Cream
      { ingredientId: "2", amount: 2.5 }, // Sugar
      { ingredientId: "4", amount: 1 }, // Cocoa Powder
      { ingredientId: "1", amount: 1.5 }, // Milk
      { ingredientId: "5", amount: 0.5 }, // Chocolate Chips
      { ingredientId: "12", amount: 0.05 }, // Stabilizer
    ],
    batches: [
      {
        date: "2023-07-16",
        supervisor: "Mike Johnson",
        quantity: 45,
        notes: "Dark chocolate variant",
      },
      {
        date: "2023-07-23",
        supervisor: "Jane Smith",
        quantity: 50,
        notes: "Standard batch",
      },
    ],
  },
  {
    _id: "3",
    name: "Strawberry",
    ingredients: [
      { ingredientId: "3", amount: 5 }, // Cream
      { ingredientId: "2", amount: 3 }, // Sugar
      { ingredientId: "1", amount: 1 }, // Milk
      { ingredientId: "12", amount: 0.05 }, // Stabilizer
    ],
    batches: [
      {
        date: "2023-07-17",
        supervisor: "Sarah Wilson",
        quantity: 40,
        notes: "Fresh strawberries",
      },
      {
        date: "2023-07-24",
        supervisor: "John Doe",
        quantity: 45,
        notes: "Extra berries",
      },
    ],
  },
  {
    _id: "4",
    name: "Cookie Dough",
    ingredients: [
      { ingredientId: "3", amount: 5 }, // Cream
      { ingredientId: "2", amount: 2 }, // Sugar
      { ingredientId: "9", amount: 2 }, // Cookie Dough
      { ingredientId: "1", amount: 1.5 }, // Milk
      { ingredientId: "5", amount: 0.3 }, // Chocolate Chips
      { ingredientId: "12", amount: 0.05 }, // Stabilizer
    ],
    batches: [
      {
        date: "2023-07-18",
        supervisor: "Mike Johnson",
        quantity: 35,
        notes: "Extra cookie chunks",
      },
      {
        date: "2023-07-25",
        supervisor: "Sarah Wilson",
        quantity: 40,
        notes: "Standard batch",
      },
    ],
  },
  {
    _id: "5",
    name: "Rocky Road",
    ingredients: [
      { ingredientId: "3", amount: 5 }, // Cream
      { ingredientId: "2", amount: 2.5 }, // Sugar
      { ingredientId: "4", amount: 0.8 }, // Cocoa Powder
      { ingredientId: "7", amount: 1 }, // Marshmallows
      { ingredientId: "10", amount: 1 }, // Nuts
      { ingredientId: "1", amount: 1 }, // Milk
      { ingredientId: "5", amount: 0.5 }, // Chocolate Chips
      { ingredientId: "12", amount: 0.05 }, // Stabilizer
    ],
    batches: [
      {
        date: "2023-07-19",
        supervisor: "John Doe",
        quantity: 30,
        notes: "Extra nuts",
      },
      {
        date: "2023-07-26",
        supervisor: "Jane Smith",
        quantity: 35,
        notes: "Standard batch",
      },
    ],
  },
];

export const suppliers: Supplier[] = [
  {
    _id: "1",
    name: "Dairy Direct",
    email: "orders@dairydirect.com",
    phone: "555-0123",
    rating: 4.8,
    preferred: true,
    minimumOrderRequirements: {
      quantity: 100,
      unit: "L",
      value: 500,
    },
    leadTime: 2,
  },
  {
    _id: "2",
    name: "Sweet Supplies Co",
    email: "orders@sweetsupplies.com",
    phone: "555-0124",
    rating: 4.5,
    preferred: true,
    minimumOrderRequirements: {
      quantity: 50,
      unit: "kg",
      value: 250,
    },
    leadTime: 3,
  },
  {
    _id: "3",
    name: "Package Plus",
    email: "sales@packageplus.com",
    phone: "555-0125",
    rating: 4.2,
    preferred: false,
    minimumOrderRequirements: {
      quantity: 500,
      unit: "unit",
      value: 1000,
    },
    leadTime: 5,
  },
];

export const orders: Order[] = [];

export const getIngredientById = (id: string): Ingredient | undefined => {
  return ingredients.find((ingredient) => ingredient._id === id);
};

export const getStockStatus = (
  ingredient: Ingredient
): "critical" | "warning" | "normal" => {
  const percentage = (ingredient.stock / ingredient.threshold) * 100;
  if (percentage <= 50) return "critical";
  if (percentage <= 80) return "warning";
  return "normal";
};

export const getIngredientsByUrgency = (): Ingredient[] => {
  return [...ingredients].sort((a, b) => {
    const aPercentage = (a.stock / a.threshold) * 100;
    const bPercentage = (b.stock / b.threshold) * 100;
    return aPercentage - bPercentage;
  });
};

export const getRecipeById = (id: string): Recipe | undefined => {
  return recipes.find((recipe) => recipe._id === id);
};

export const getSupplierById = (id: string): Supplier | undefined => {
  return suppliers.find((supplier) => supplier._id === id);
};

export const convertUnit = (
  value: number,
  fromUnit: string,
  toUnit: string
): number => {
  // Simplified unit conversion - would be more complex in a real app
  if (fromUnit === toUnit) return value;

  // Weight conversions
  if (fromUnit === "kg" && toUnit === "g") return value * 1000;
  if (fromUnit === "g" && toUnit === "kg") return value / 1000;

  // Volume conversions
  if (fromUnit === "L" && toUnit === "mL") return value * 1000;
  if (fromUnit === "mL" && toUnit === "L") return value / 1000;

  // Unsupported conversion
  console.warn(`Conversion from ${fromUnit} to ${toUnit} not supported`);
  return value;
};

================
File: src/lib/units.ts
================
export type UnitCategoryType =
  | "dairy_liquid"
  | "dry"
  | "solid_mixin"
  | "packaging";

export interface UnitDefinition {
  symbol: string;
  name: string;
  category: UnitCategoryType;
  baseUnit: string;
  conversionFactor: number;
}

export interface UnitCategoryDefinition {
  name: string;
  description: string;
  type: UnitCategoryType;
  units: UnitDefinition[];
}

export const unitCategories: UnitCategoryDefinition[] = [
  {
    name: "Dairy & Liquid Ingredients",
    description:
      "Units for milk, cream, liquid flavorings, and other liquid ingredients",
    type: "dairy_liquid",
    units: [
      {
        symbol: "cups",
        name: "Cups",
        category: "dairy_liquid",
        baseUnit: "L",
        conversionFactor: 0.236588,
      },
      {
        symbol: "gal",
        name: "Gallons",
        category: "dairy_liquid",
        baseUnit: "L",
        conversionFactor: 3.78541,
      },
      {
        symbol: "L",
        name: "Liters",
        category: "dairy_liquid",
        baseUnit: "L",
        conversionFactor: 1,
      },
      {
        symbol: "qt",
        name: "Quarts",
        category: "dairy_liquid",
        baseUnit: "L",
        conversionFactor: 0.946353,
      },
      {
        symbol: "pt",
        name: "Pints",
        category: "dairy_liquid",
        baseUnit: "L",
        conversionFactor: 0.473176,
      },
      {
        symbol: "fl_oz",
        name: "Fluid Ounces",
        category: "dairy_liquid",
        baseUnit: "L",
        conversionFactor: 0.0295735,
      },
      {
        symbol: "mL",
        name: "Milliliters",
        category: "dairy_liquid",
        baseUnit: "L",
        conversionFactor: 0.001,
      },
      {
        symbol: "tube",
        name: "Tubes",
        category: "dairy_liquid",
        baseUnit: "L",
        conversionFactor: 0.5,
      },
      {
        symbol: "drop",
        name: "Drops",
        category: "dairy_liquid",
        baseUnit: "L",
        conversionFactor: 0.001,
      },
    ],
  },
  {
    name: "Dry Ingredients",
    description:
      "Units for sugar, cocoa powder, stabilizers, and other dry ingredients",
    type: "dry",
    units: [
      {
        symbol: "kg",
        name: "Kilograms",
        category: "dry",
        baseUnit: "g",
        conversionFactor: 1000,
      },
      {
        symbol: "g",
        name: "Grams",
        category: "dry",
        baseUnit: "g",
        conversionFactor: 1,
      },
      {
        symbol: "lbs",
        name: "Pounds",
        category: "dry",
        baseUnit: "g",
        conversionFactor: 453.592,
      },
      {
        symbol: "oz",
        name: "Ounces",
        category: "dry",
        baseUnit: "g",
        conversionFactor: 28.3495,
      },
      {
        symbol: "cup",
        name: "Cups",
        category: "dry",
        baseUnit: "g",
        conversionFactor: 128,
      }, // Approximate
      {
        symbol: "tbsp",
        name: "Tablespoons",
        category: "dry",
        baseUnit: "g",
        conversionFactor: 15,
      }, // Approximate
      {
        symbol: "tsp",
        name: "Teaspoons",
        category: "dry",
        baseUnit: "g",
        conversionFactor: 5,
      }, // Approximate
    ],
  },
  {
    name: "Solid & Chunky Mix-ins",
    description:
      "Units for chocolate chips, nuts, cookie dough pieces, and other mix-ins",
    type: "solid_mixin",
    units: [
      {
        symbol: "kg",
        name: "Kilograms",
        category: "solid_mixin",
        baseUnit: "g",
        conversionFactor: 1000,
      },
      {
        symbol: "g",
        name: "Grams",
        category: "solid_mixin",
        baseUnit: "g",
        conversionFactor: 1,
      },
      {
        symbol: "lbs",
        name: "Pounds",
        category: "solid_mixin",
        baseUnit: "g",
        conversionFactor: 453.592,
      },
      {
        symbol: "oz",
        name: "Ounces",
        category: "solid_mixin",
        baseUnit: "g",
        conversionFactor: 28.3495,
      },
      {
        symbol: "case",
        name: "Cases",
        category: "solid_mixin",
        baseUnit: "case",
        conversionFactor: 1,
      },
      {
        symbol: "bag",
        name: "Bags",
        category: "solid_mixin",
        baseUnit: "bag",
        conversionFactor: 1,
      },
    ],
  },
  {
    name: "Packaging & Cones",
    description:
      "Units for waffle cones, sugar cones, cups, and packaging supplies",
    type: "packaging",
    units: [
      {
        symbol: "unit",
        name: "Units",
        category: "packaging",
        baseUnit: "unit",
        conversionFactor: 1,
      },
      {
        symbol: "box",
        name: "Boxes",
        category: "packaging",
        baseUnit: "unit",
        conversionFactor: 24,
      }, // Assuming 24 units per box
      {
        symbol: "case",
        name: "Cases",
        category: "packaging",
        baseUnit: "unit",
        conversionFactor: 144,
      }, // Assuming 6 boxes per case
      {
        symbol: "dz",
        name: "Dozens",
        category: "packaging",
        baseUnit: "unit",
        conversionFactor: 12,
      },
    ],
  },
];

export const findUnitDefinition = (
  symbol: string
): UnitDefinition | undefined => {
  for (const category of unitCategories) {
    const unit = category.units.find((u) => u.symbol === symbol);
    if (unit) return unit;
  }
  return undefined;
};

export const convertUnits = (
  value: number,
  fromUnit: string,
  toUnit: string
): number | null => {
  const fromDef = findUnitDefinition(fromUnit);
  const toDef = findUnitDefinition(toUnit);

  if (!fromDef || !toDef || fromDef.category !== toDef.category) {
    return null;
  }

  const baseValue = value * fromDef.conversionFactor;
  return baseValue / toDef.conversionFactor;
};

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/pages/Index.tsx
================
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/context/AuthContext";
import { Layout } from "@/components/Layout";
import Stats from "@/components/Dashboard/Stats";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { CircularGauge } from "@/components/ui/CircularGauge";
import { BarChart, Package, ShoppingCart, UtensilsCrossed } from "lucide-react";
import { Separator } from "@/components/ui/separator";
import {
  ResponsiveContainer,
  BarChart as RechartsBarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
} from "recharts";

interface Ingredient {
  _id: string;
  name: string;
  stock: number;
  unit: string;
  threshold: number;
  history: { date: string; level: number }[];
}

interface Recipe {
  _id: string;
  name: string;
  ingredients: { ingredientId: string; amount: number }[];
  batches: {
    date: string;
    supervisor: string;
    quantity: number;
    notes?: string;
  }[];
}

interface Production {
  _id: string;
  date: string;
  recipeId: string;
  quantity: number;
  notes?: string;
  supervisor: string;
}

const Index = () => {
  const [ingredients, setIngredients] = useState<Ingredient[]>([]);
  const [recipes, setRecipes] = useState<Recipe[]>([]);
  const [productionLogs, setProductionLogs] = useState<Production[]>([]);

  const { user } = useAuth();
  const navigate = useNavigate();

  // redirect if not logged in
  useEffect(() => {
    if (!user) {
      navigate("/login");
    }
  }, [user, navigate]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [ingRes, recRes, prodRes] = await Promise.all([
          fetch(`${import.meta.env.VITE_API_URL}/api/ingredients`, {
            credentials: "include",
          }),
          fetch(`${import.meta.env.VITE_API_URL}/api/recipes`, {
            credentials: "include",
          }),
          fetch(`${import.meta.env.VITE_API_URL}/api/production`, {
            credentials: "include",
          }),
        ]);

        const [ingData, recData, prodData] = await Promise.all([
          ingRes.json(),
          recRes.json(),
          prodRes.json(),
        ]);

        // make sure these are arrays
        if (!Array.isArray(ingData)) {
          console.error("Ingredients response is not an array:", ingData);
          setIngredients([]); // fallback
        } else {
          setIngredients(ingData);
        }

        if (!Array.isArray(recData)) {
          console.error("Recipes response is not an array:", recData);
          setRecipes([]); // fallback
        } else {
          setRecipes(recData);
        }

        if (!Array.isArray(prodData)) {
          console.error("Production logs response is not an array:", prodData);
          setProductionLogs([]); // fallback
        } else {
          setProductionLogs(prodData);
        }
      } catch (error) {
        console.error("Failed to load dashboard data:", error);
      }
    };

    fetchData();
  }, []);

  const lowStockIngredients = Array.isArray(ingredients)
    ? ingredients
        .filter((ingredient) => ingredient.stock < ingredient.threshold)
        .sort((a, b) => a.stock / a.threshold - b.stock / b.threshold)
        .slice(0, 3)
    : [];

  const recipeProductionData = recipes
    .map((recipe) => {
      // Get all production logs for this recipe
      const recipeProduction = productionLogs
        .filter((log) => log.recipeId === recipe._id)
        .reduce((sum, log) => sum + log.quantity, 0);

      return {
        name: recipe.name,
        production: recipeProduction,
      };
    })
    .filter((data) => data.production > 0); // Only show recipes with production

  return (
    <Layout>
      <div className="space-y-8">
        <div className="flex flex-col gap-2">
          <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
          <p className="text-muted-foreground">
            Overview of your production inventory.
          </p>
        </div>

        <Stats />

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <Card className="md:col-span-2 hover-scale">
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <BarChart size={18} className="text-primary" />
                Production Overview
              </CardTitle>
              <CardDescription>Total production by flavor</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[250px] w-full">
                {recipeProductionData.length > 0 ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <RechartsBarChart
                      data={recipeProductionData}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid
                        strokeDasharray="3 3"
                        vertical={false}
                        stroke="#f0f0f0"
                      />
                      <XAxis dataKey="name" />
                      <YAxis />
                      <Tooltip
                        contentStyle={{
                          borderRadius: "8px",
                          border: "none",
                          boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                        }}
                      />
                      <Bar
                        dataKey="production"
                        name="Units Produced"
                        fill="#3984A3"
                        radius={[4, 4, 0, 0]}
                      />
                    </RechartsBarChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="h-full flex items-center justify-center text-muted-foreground">
                    No production data yet
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          <Card className="hover-scale">
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <Package size={18} className="text-orange-500" />
                Low Stock Alert
              </CardTitle>
              <CardDescription>Items that need restocking soon</CardDescription>
            </CardHeader>
            <CardContent>
              {lowStockIngredients.length === 0 ? (
                <div className="text-center py-6 text-muted-foreground">
                  No ingredients below threshold
                </div>
              ) : (
                <div className="space-y-4">
                  {lowStockIngredients.map((ingredient) => (
                    <div
                      key={ingredient._id}
                      className="flex items-center justify-between"
                    >
                      <div>
                        <p className="font-medium">{ingredient.name}</p>
                        <p className="text-sm text-muted-foreground">
                          {ingredient.stock} / {ingredient.threshold}{" "}
                          {ingredient.unit}
                        </p>
                      </div>
                      <CircularGauge
                        value={ingredient.stock}
                        maxValue={ingredient.threshold}
                        size={60}
                        thickness={6}
                      />
                    </div>
                  ))}
                </div>
              )}
              <div className="mt-4">
                <Link to="/inventory">
                  <Button variant="outline" className="w-full">
                    View All Ingredients
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card className="hover-scale">
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <UtensilsCrossed size={18} className="text-emerald-500" />
                Recipe Management
              </CardTitle>
              <CardDescription>Quick access to recipes</CardDescription>
            </CardHeader>
            <CardContent>
              <Link to="/recipes">
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                  {recipes.slice(0, 3).map((recipe) => (
                    <div
                      key={recipe._id}
                      className="p-3 rounded-lg border bg-muted/50 hover:bg-muted transition-colors flex flex-col gap-1"
                    >
                      <p className="font-medium text-sm">{recipe.name}</p>
                      <p className="text-xs text-muted-foreground">
                        {recipe.ingredients.length} ingredients
                      </p>
                    </div>
                  ))}
                </div>
              </Link>
              <Separator className="my-4" />
              <Link to="/recipes">
                <Button variant="outline" className="w-full">
                  Manage Recipes
                </Button>
              </Link>
            </CardContent>
          </Card>

          <Card className="hover-scale">
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <ShoppingCart size={18} className="text-blue-500" />
                Ordering
              </CardTitle>
              <CardDescription>
                Order ingredients from suppliers
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="space-y-2">
                  <p className="text-sm font-medium">Recommended Orders</p>
                  <div className="p-3 rounded-lg border bg-muted/50">
                    <p className="font-medium text-sm">Weekly Order Bundle</p>
                    <p className="text-xs text-muted-foreground mb-2">
                      5 ingredients from preferred suppliers
                    </p>
                    <div className="flex justify-between items-center">
                      <p className="text-sm font-semibold">$345.00</p>
                      <Button variant="secondary" size="sm">
                        View Details
                      </Button>
                    </div>
                  </div>
                </div>
                <Separator />
                <Link to="/ordering">
                  <Button variant="outline" className="w-full">
                    Go to Ordering
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </Layout>
  );
};

export default Index;

================
File: src/pages/Inventory.tsx
================
import React, { useState, useEffect } from "react";
import { Layout } from "@/components/Layout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { IngredientCard } from "@/components/Inventory/IngredientCard";
import { AddIngredientModal } from "@/components/Inventory/AddIngredientModal";
import { FilterX, Plus, Search, SlidersHorizontal } from "lucide-react";
import { cn } from "@/lib/utils";
import { toast } from "sonner";
import { Ingredient } from "@/lib/data";

const Inventory = () => {
  const initialIngredients: Ingredient[] = []; // define an empty array or populate with initial data
  const [ingredients, setIngredients] =
    useState<Ingredient[]>(initialIngredients);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortBy, setSortBy] = useState("urgency");
  const [addModalOpen, setAddModalOpen] = useState(false);
  const [editingIngredient, setEditingIngredient] = useState<Ingredient | null>(
    null
  );

  useEffect(() => {
    const fetchIngredients = async () => {
      try {
        const res = await fetch(
          `${import.meta.env.VITE_API_URL}/api/ingredients`,
          {
            credentials: "include",
          }
        );
        const data = await res.json();
        setIngredients(data);
      } catch (err) {
        console.error("Failed to fetch ingredients", err);
      }
    };

    fetchIngredients();
  }, []);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  const handleSortChange = (value: string) => {
    setSortBy(value);
  };

  const handleAddIngredient = async (values) => {
    try {
      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/ingredients`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          name: values.name,
          stock: Number(values.stock),
          unit: values.unit,
          threshold: Number(values.threshold),
          minimumOrderQuantity: values.minimumOrderQuantity ? Number(values.minimumOrderQuantity) : undefined,
          supplierId: values.supplierId,
          upc: values.upc,
          unitCategory: values.unitCategory,
          history: [
            {
              date: new Date().toISOString().split("T")[0],
              level: Number(values.stock),
            },
          ],
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to create ingredient');
      }

      const newIngredient = await response.json();
      setIngredients([...ingredients, newIngredient]);
      toast.success('Ingredient added successfully!');
    } catch (error) {
      console.error('Error adding ingredient:', error);
      toast.error('Failed to add ingredient');
    }
  };

  const handleEditIngredient = (ingredient: Ingredient) => {
    setEditingIngredient(ingredient);
    setAddModalOpen(true);
  };

  const handleUpdateIngredient = async (id: string, values: any) => {
    try {
      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/ingredients/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          name: values.name,
          stock: Number(values.stock),
          unit: values.unit,
          threshold: Number(values.threshold),
          minimumOrderQuantity: values.minimumOrderQuantity ? Number(values.minimumOrderQuantity) : undefined,
          supplierId: values.supplierId,
          upc: values.upc,
          unitCategory: values.unitCategory,
          history: [
            ...editingIngredient?.history,
            {
              date: new Date().toISOString().split("T")[0],
              level: Number(values.stock),
            },
          ],
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to update ingredient');
      }

      const updatedIngredient = await response.json();
      setIngredients(ingredients.map(ing => 
        ing._id === id ? updatedIngredient : ing
      ));
      toast.success('Ingredient updated successfully!');
    } catch (error) {
      console.error('Error updating ingredient:', error);
      toast.error('Failed to update ingredient');
    }
  };

  const handleDeleteIngredient = async (ingredient: Ingredient) => {
    try {
      const response = await fetch(
        `${import.meta.env.VITE_API_URL}/api/ingredients/${ingredient._id}`,
        {
          method: "DELETE",
          credentials: "include",
        }
      );

      if (!response.ok) {
        throw new Error("Failed to delete ingredient");
      }

      setIngredients(ingredients.filter((ing) => ing._id !== ingredient._id));
      toast.success(`${ingredient.name} deleted successfully!`);
    } catch (error) {
      console.error("Error deleting ingredient:", error);
      toast.error("Failed to delete ingredient");
    }
  };

  const handleClearSearch = () => {
    setSearchTerm("");
  };

  // Filter and sort ingredients
  let filteredIngredients = [...ingredients];

  // Apply search filter
  if (searchTerm) {
    filteredIngredients = filteredIngredients.filter((ingredient) =>
      ingredient.name.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }

  // Apply sorting
  if (sortBy === "urgency") {
    filteredIngredients.sort((a, b) => {
      const aPercentage = (a.stock / a.threshold) * 100;
      const bPercentage = (b.stock / b.threshold) * 100;
      return aPercentage - bPercentage;
    });
  } else if (sortBy === "name-asc") {
    filteredIngredients.sort((a, b) => a.name.localeCompare(b.name));
  } else if (sortBy === "name-desc") {
    filteredIngredients.sort((a, b) => b.name.localeCompare(a.name));
  } else if (sortBy === "stock-asc") {
    filteredIngredients.sort((a, b) => a.stock - b.stock);
  } else if (sortBy === "stock-desc") {
    filteredIngredients.sort((a, b) => b.stock - a.stock);
  }

  return (
    <Layout>
      <div className="space-y-6">
        <div className="flex flex-col gap-2">
          <h1 className="text-3xl font-bold tracking-tight">
            Ingredient Inventory
          </h1>
          <p className="text-muted-foreground">
            Manage your ingredients and monitor stock levels.
          </p>
        </div>

        <div className="flex flex-col sm:flex-row gap-4 items-center">
          <div className="relative w-full sm:w-auto flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              placeholder="Search ingredients..."
              className="pl-10 pr-10"
              value={searchTerm}
              onChange={handleSearch}
            />
            {searchTerm && (
              <Button
                variant="ghost"
                size="icon"
                className="absolute right-1 top-1/2 transform -translate-y-1/2 h-7 w-7"
                onClick={handleClearSearch}
              >
                <FilterX className="h-4 w-4" />
              </Button>
            )}
          </div>

          <div className="flex gap-2 w-full sm:w-auto">
            <div className="flex items-center gap-2">
              <SlidersHorizontal className="text-muted-foreground h-4 w-4" />
              <Select value={sortBy} onValueChange={handleSortChange}>
                <SelectTrigger className="w-32 sm:w-48">
                  <SelectValue placeholder="Sort by" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="urgency">Restock Urgency</SelectItem>
                  <SelectItem value="name-asc">Name (A-Z)</SelectItem>
                  <SelectItem value="name-desc">Name (Z-A)</SelectItem>
                  <SelectItem value="stock-asc">Stock (Low to High)</SelectItem>
                  <SelectItem value="stock-desc">
                    Stock (High to Low)
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>

            <Button onClick={() => {
              setEditingIngredient(null);
              setAddModalOpen(true);
            }}>
              <Plus className="h-4 w-4 mr-2" />
              Add
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4">
          {filteredIngredients.length === 0 ? (
            <div className="col-span-full flex flex-col items-center justify-center py-12 text-center">
              <div className="bg-muted/50 rounded-full p-3 mb-3">
                <Search className="h-6 w-6 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-medium">No ingredients found</h3>
              <p className="text-muted-foreground mt-1">
                {searchTerm
                  ? `No results for "${searchTerm}"`
                  : "Try adding some ingredients to get started."}
              </p>
              <Button
                variant="outline"
                className="mt-4"
                onClick={() => {
                  setEditingIngredient(null);
                  setAddModalOpen(true);
                }}
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Ingredient
              </Button>
            </div>
          ) : (
            filteredIngredients.map((ingredient) => (
              <IngredientCard
                key={ingredient._id}
                ingredient={ingredient}
                onEdit={() => handleEditIngredient(ingredient)}
                onDelete={() => handleDeleteIngredient(ingredient)}
              />
            ))
          )}
        </div>
      </div>

      <AddIngredientModal
        open={addModalOpen}
        onOpenChange={setAddModalOpen}
        onAddIngredient={handleAddIngredient}
        onEditIngredient={handleUpdateIngredient}
        editingIngredient={editingIngredient}
      />
    </Layout>
  );
};

export default Inventory;

================
File: src/pages/Login.tsx
================
// src/pages/Login.tsx
import React from "react";
import { useNavigate, Link } from "react-router-dom";
import { useForm } from "react-hook-form";
import { toast } from "@/components/ui/use-toast";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useAuth } from "@/context/AuthContext";

interface LoginFormData {
  username: string;
  password: string;
}

const Login = () => {
  const { register, handleSubmit } = useForm<LoginFormData>();
  const { login } = useAuth();
  const navigate = useNavigate();

  const onSubmit = async (data: LoginFormData) => {
    try {
      const res = await fetch(
        `${import.meta.env.VITE_API_URL}/api/auth/login`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify(data),
        }
      );

      const json = await res.json();

      if (!res.ok) throw new Error(json.message || "Login failed");

      login(data.username); // Set username in context
      toast({ title: "Success", description: "Logged in successfully!" });
      navigate("/");
    } catch (err: unknown) {
      const errorMessage =
        err instanceof Error ? err.message : "Something went wrong";
      toast({
        variant: "destructive",
        title: "Login failed",
        description: errorMessage,
      });
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-background">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl text-center">Batchr</CardTitle>
          <CardTitle className="text-lg text-center">Sign In</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div>
              <Label htmlFor="username">Username</Label>
              <Input
                id="username"
                {...register("username", { required: true })}
              />
            </div>
            <div>
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                {...register("password", { required: true })}
              />
            </div>
            <Button type="submit" className="w-full">
              Sign In
            </Button>
          </form>
          <div className="mt-4 text-center text-sm">
            Don’t have an account?{" "}
            <Link to="/register" className="text-primary hover:underline">
              Sign Up
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Login;

================
File: src/pages/NotFound.tsx
================
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;

================
File: src/pages/Ordering.tsx
================
import React, { useState, useEffect, useMemo } from "react";
import { Layout } from "@/components/Layout";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle, Package, ShoppingCart, Building2 } from "lucide-react";
import {
  getIngredientById,
  getStockStatus,
  Ingredient,
  Supplier,
  suppliers,
  OrderItem,
  Order,
} from "@/lib/data";

interface CartItem extends OrderItem {
  ingredient: Ingredient;
  supplier?: Supplier;
}

export default function Ordering() {
  const [cartItems, setCartItems] = useState<OrderItem[]>([]);
  const [lowStockItems, setLowStockItems] = useState<Ingredient[]>([]);
  const [userIngredients, setUserIngredients] = useState<Ingredient[]>([]);
  const [userSuppliers, setUserSuppliers] = useState<Supplier[]>([]);
  const [newSupplier, setNewSupplier] = useState({
    name: "",
    supplierLink: "",
  });
  const [validationErrors, setValidationErrors] = useState<{
    [key: string]: string;
  }>({});

  useEffect(() => {
    // Fetch user's ingredients from the backend
    const fetchIngredients = async () => {
      try {
        const response = await fetch("/api/ingredients");
        if (!response.ok) {
          throw new Error("Failed to fetch ingredients");
        }
        const data = await response.json();
        setUserIngredients(data);
      } catch (error) {
        console.error("Error fetching ingredients:", error);
      }
    };

    fetchIngredients();
  }, []);

  useEffect(() => {
    // Fetch user's suppliers from the backend
    const fetchSuppliers = async () => {
      try {
        const response = await fetch("/api/suppliers");
        if (!response.ok) {
          throw new Error("Failed to fetch suppliers");
        }
        const data = await response.json();
        setUserSuppliers(data);
      } catch (error) {
        console.error("Error fetching suppliers:", error);
      }
    };

    fetchSuppliers();
  }, []);

  useEffect(() => {
    // Get low stock items from user's ingredients
    const lowStock = userIngredients.filter((item) => {
      const status = getStockStatus(item);
      return status === "warning" || status === "critical";
    });
    setLowStockItems(lowStock);
  }, [userIngredients]);

  // Group cart items by supplier
  const itemsBySupplier = useMemo(() => {
    return cartItems.reduce((acc, item) => {
      const supplierId = item.supplier?._id || "unassigned";
      if (!acc[supplierId]) {
        acc[supplierId] = [];
      }
      acc[supplierId].push(item);
      return acc;
    }, {} as { [key: string]: OrderItem[] });
  }, [cartItems]);

  // Add item to cart
  const addToCart = (ingredient: Ingredient) => {
    // Find the preferred supplier for this ingredient
    const supplier = suppliers.find((s) => s.preferred);
    const orderItem: OrderItem = {
      ingredientId: ingredient._id,
      ingredient: ingredient,
      quantity: Math.max(ingredient.threshold - ingredient.stock, 0),
      unit: ingredient.unit,
      supplier: supplier,
      minimumOrderQuantity: ingredient.minimumOrderQuantity,
    };
    setCartItems([...cartItems, orderItem]);
  };

  // Update item quantity
  const updateQuantity = (ingredientId: string, quantity: number) => {
    setCartItems(
      cartItems.map((item) =>
        item.ingredientId === ingredientId ? { ...item, quantity } : item
      )
    );
  };

  // Remove item from cart
  const removeFromCart = (ingredientId: string) => {
    setCartItems(
      cartItems.filter((item) => item.ingredientId !== ingredientId)
    );
  };

  // Bring all quantities to PAR
  const bringAllToPar = () => {
    const updatedItems = cartItems.map((item) => ({
      ...item,
      quantity: Math.max(
        item.ingredient.threshold - item.ingredient.stock,
        item.minimumOrderQuantity || 0
      ),
    }));
    setCartItems(updatedItems);
  };

  // Validate order
  const validateOrder = (): boolean => {
    const errors: { [key: string]: string } = {};
    const supplierTotals: {
      [key: string]: { quantity: number; value: number };
    } = {};

    // Calculate totals by supplier
    cartItems.forEach((item) => {
      if (item.supplier) {
        const supplierId = item.supplier._id;
        if (!supplierTotals[supplierId]) {
          supplierTotals[supplierId] = { quantity: 0, value: 0 };
        }
        supplierTotals[supplierId].quantity += item.quantity;
        // TODO: Add price calculation when available
        // supplierTotals[supplierId].value += item.quantity * item.price;
      }

      // Check individual item minimum order quantity
      if (
        item.minimumOrderQuantity &&
        item.quantity < item.minimumOrderQuantity
      ) {
        errors[
          item.ingredientId
        ] = `Minimum order quantity is ${item.minimumOrderQuantity} ${item.unit}`;
      }
    });

    // Check supplier minimum requirements
    Object.entries(supplierTotals).forEach(([supplierId, totals]) => {
      const supplier = suppliers.find((s) => s._id === supplierId);
      if (supplier?.minimumOrderRequirements) {
        const { quantity, value, unit } = supplier.minimumOrderRequirements;

        if (quantity && totals.quantity < quantity) {
          errors[`supplier_${supplierId}`] = `Minimum order quantity for ${
            supplier.name
          } is ${quantity} ${unit || "units"}`;
        }

        if (value && totals.value < value) {
          errors[
            `supplier_${supplierId}`
          ] = `Minimum order value for ${supplier.name} is $${value}`;
        }
      }
    });

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  // Submit order
  const submitOrder = () => {
    if (!validateOrder()) {
      return;
    }

    // Group items by supplier
    const ordersBySupplier = Object.entries(itemsBySupplier).map(
      ([supplierId, items]) => {
        const supplier = items[0]?.supplier;
        const order: Order = {
          id: Math.random().toString(36).substr(2, 9),
          supplierId: supplier?._id || "unassigned",
          supplier: supplier,
          items: items.map((item) => ({
            ingredientId: item.ingredientId,
            ingredient: item.ingredient,
            quantity: item.quantity,
            unit: item.unit,
            supplier: item.supplier,
            minimumOrderQuantity: item.minimumOrderQuantity,
          })),
          status: "pending",
          orderDate: new Date().toISOString(),
        };
        return order;
      }
    );

    // TODO: Submit orders to backend
    console.log("Submitting orders:", ordersBySupplier);
    setCartItems([]);
    setValidationErrors({});
  };

  const addSupplier = async () => {
    if (!newSupplier.name) {
      setValidationErrors({ supplier: "Supplier name is required" });
      return;
    }

    try {
      const response = await fetch("/api/suppliers", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newSupplier),
      });

      if (!response.ok) {
        throw new Error("Failed to add supplier");
      }

      const addedSupplier = await response.json();
      setUserSuppliers([...userSuppliers, addedSupplier]);
      setNewSupplier({ name: "", supplierLink: "" });
      setValidationErrors({});
    } catch (error) {
      console.error("Error adding supplier:", error);
      setValidationErrors({ supplier: "Failed to add supplier" });
    }
  };

  const togglePreferredSupplier = async (supplierId: string) => {
    try {
      const supplier = userSuppliers.find((s) => s._id === supplierId);
      const response = await fetch(`/api/suppliers/${supplierId}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ preferred: !supplier?.preferred }),
      });

      if (!response.ok) {
        throw new Error("Failed to update supplier");
      }

      setUserSuppliers(
        userSuppliers.map((s) =>
          s._id === supplierId ? { ...s, preferred: !s.preferred } : s
        )
      );
    } catch (error) {
      console.error("Error updating supplier:", error);
    }
  };

  return (
    <Layout>
      <div className="container mx-auto py-6 space-y-6">
        <div className="flex justify-between items-center">
          <div className="space-y-1">
            <h1 className="text-3xl font-bold">Ordering</h1>
            <p className="text-muted-foreground">
              Manage your ingredient orders and track low stock items
            </p>
          </div>
          {cartItems.length > 0 && (
            <Button onClick={bringAllToPar}>Bring All to PAR</Button>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Low Stock Items */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Package className="h-5 w-5 text-orange-500" />
                Low Stock Items
              </CardTitle>
              <CardDescription>
                Items that need to be ordered soon
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {lowStockItems.length === 0 ? (
                  <p className="text-center text-muted-foreground py-4">
                    All ingredients are well-stocked
                  </p>
                ) : (
                  lowStockItems.map((item) => (
                    <div
                      key={item._id}
                      className="flex justify-between items-center p-4 border rounded-lg hover:bg-muted/50 transition-colors"
                    >
                      <div>
                        <div className="font-medium">{item.name}</div>
                        <div className="text-sm text-muted-foreground">
                          Stock: {item.stock} {item.unit} / PAR:{" "}
                          {item.threshold} {item.unit}
                        </div>
                      </div>
                      <Button
                        onClick={() => addToCart(item)}
                        disabled={cartItems.some(
                          (i) => i.ingredientId === item._id
                        )}
                      >
                        Add to Cart
                      </Button>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>

          {/* Shopping Cart */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <ShoppingCart className="h-5 w-5 text-primary" />
                Shopping Cart
              </CardTitle>
              <CardDescription>
                {cartItems.length} item{cartItems.length !== 1 ? "s" : ""} to
                order
              </CardDescription>
            </CardHeader>
            <CardContent>
              {cartItems.length === 0 ? (
                <div className="text-center text-muted-foreground py-8">
                  Your cart is empty
                </div>
              ) : (
                <div className="space-y-6">
                  {Object.entries(itemsBySupplier).map(
                    ([supplierId, items]) => (
                      <div key={supplierId} className="space-y-4">
                        <h3 className="font-semibold">
                          {items[0]?.supplier?.name || "Unassigned Supplier"}
                        </h3>
                        {items[0]?.supplier?.minimumOrderRequirements && (
                          <div className="text-sm text-muted-foreground">
                            Minimum Order:{" "}
                            {
                              items[0].supplier.minimumOrderRequirements
                                .quantity
                            }{" "}
                            {items[0].supplier.minimumOrderRequirements.unit}
                            {items[0].supplier.minimumOrderRequirements.value &&
                              ` or $${items[0].supplier.minimumOrderRequirements.value}`}
                          </div>
                        )}
                        {validationErrors[`supplier_${supplierId}`] && (
                          <Alert variant="destructive">
                            <AlertCircle className="h-4 w-4" />
                            <AlertDescription>
                              {validationErrors[`supplier_${supplierId}`]}
                            </AlertDescription>
                          </Alert>
                        )}
                        {items.map((item) => (
                          <div
                            key={item.ingredientId}
                            className="grid grid-cols-6 gap-4 items-center p-4 border rounded-lg"
                          >
                            <div className="col-span-2">
                              <Label>{item.ingredient.name}</Label>
                              <div className="text-sm text-muted-foreground">
                                Current: {item.ingredient.stock} {item.unit}
                              </div>
                              <div className="text-sm text-muted-foreground">
                                PAR: {item.ingredient.threshold} {item.unit}
                              </div>
                            </div>
                            <div className="col-span-2">
                              <Label>Order Quantity ({item.unit})</Label>
                              <Input
                                type="number"
                                value={item.quantity}
                                onChange={(e) =>
                                  updateQuantity(
                                    item.ingredientId,
                                    Number(e.target.value)
                                  )
                                }
                                min={0}
                              />
                              {item.minimumOrderQuantity && (
                                <div className="text-sm text-muted-foreground">
                                  Min: {item.minimumOrderQuantity} {item.unit}
                                </div>
                              )}
                            </div>
                            <div className="col-span-1">
                              {validationErrors[item.ingredientId] && (
                                <Alert variant="destructive">
                                  <AlertCircle className="h-4 w-4" />
                                  <AlertDescription>
                                    {validationErrors[item.ingredientId]}
                                  </AlertDescription>
                                </Alert>
                              )}
                            </div>
                            <div className="col-span-1 text-right">
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() =>
                                  removeFromCart(item.ingredientId)
                                }
                              >
                                Remove
                              </Button>
                            </div>
                          </div>
                        ))}
                      </div>
                    )
                  )}

                  <div className="flex justify-end mt-4">
                    <Button onClick={submitOrder} size="lg">
                      Submit Order
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Supplier Management Section */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Building2 className="h-5 w-5 text-blue-500" />
              Supplier Management
            </CardTitle>
            <CardDescription>
              Manage your suppliers and their preferences
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              {/* Add New Supplier */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 border rounded-lg">
                <div>
                  <Label>Supplier Name</Label>
                  <Input
                    value={newSupplier.name}
                    onChange={(e) =>
                      setNewSupplier({ ...newSupplier, name: e.target.value })
                    }
                    placeholder="Enter supplier name"
                  />
                </div>
                <div>
                  <Label>Supplier Link</Label>
                  <Input
                    value={newSupplier.supplierLink}
                    onChange={(e) =>
                      setNewSupplier({
                        ...newSupplier,
                        supplierLink: e.target.value,
                      })
                    }
                    placeholder="Enter supplier website"
                  />
                </div>
                <div className="flex items-end">
                  <Button onClick={addSupplier}>Add Supplier</Button>
                </div>
                {validationErrors.supplier && (
                  <Alert variant="destructive" className="col-span-3">
                    <AlertCircle className="h-4 w-4" />
                    <AlertDescription>
                      {validationErrors.supplier}
                    </AlertDescription>
                  </Alert>
                )}
              </div>

              {/* Supplier List */}
              <div className="space-y-4">
                {userSuppliers.length === 0 ? (
                  <p className="text-center text-muted-foreground py-4">
                    No suppliers added yet
                  </p>
                ) : (
                  userSuppliers.map((supplier) => (
                    <div
                      key={supplier._id}
                      className="flex justify-between items-center p-4 border rounded-lg"
                    >
                      <div>
                        <div className="font-medium">{supplier.name}</div>
                        {supplier.supplierLink && (
                          <a
                            href={supplier.supplierLink}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-sm text-blue-500 hover:underline"
                          >
                            Visit Website
                          </a>
                        )}
                      </div>
                      <div className="flex items-center gap-4">
                        <Button
                          variant={supplier.preferred ? "default" : "outline"}
                          onClick={() => togglePreferredSupplier(supplier._id)}
                        >
                          {supplier.preferred
                            ? "Preferred"
                            : "Set as Preferred"}
                        </Button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </Layout>
  );
}

================
File: src/pages/Planning.tsx
================
import React from "react";
import ScheduleHeader from "../components/Planning/ScheduleHeader";
import NewScheduleForm from "../components/Planning/NewScheduleForm";
import ProductionSchedule from "../components/Planning/ProductionSchedule";
import { Layout } from "../components/Layout";

const ProductionDashboard: React.FC = () => {
  return (
    <Layout>
      <div className="flex h-screen w-full bg-white">
        <div className="flex-1 flex flex-col overflow-hidden">
          <ScheduleHeader title="Production" />

          <div className="flex flex-1 overflow-hidden">
            <NewScheduleForm />
            <ProductionSchedule />
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default ProductionDashboard;

================
File: src/pages/Production.tsx
================
import React, { useState, useEffect } from "react";
import { Layout } from "@/components/Layout";
import { Button } from "@/components/ui/button";
import {
  CardHeader,
  CardContent,
  CardFooter,
  Card,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Calendar as CalendarIcon,
  Clipboard,
  FileText,
  PlusCircle,
  Save,
} from "lucide-react";
import { format } from "date-fns";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { toast } from "sonner";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Recipe } from "@/lib/data";

interface ProductionEntry {
  date: Date;
  recipeId: string;
  quantity: number;
  notes: string;
  supervisor: string;
}

const Production = () => {
  const [date, setDate] = useState<Date>(new Date());
  const [selectedRecipe, setSelectedRecipe] = useState<string>("");
  const [quantity, setQuantity] = useState<string>("50");
  const [notes, setNotes] = useState<string>("");
  const [supervisor, setSupervisor] = useState<string>("");
  const [recipes, setRecipes] = useState<Recipe[]>([]);
  const [productionLog, setProductionLog] = useState<ProductionEntry[]>([]);

  // Fetch recipes and production log on mount
  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch recipes
        const recipesRes = await fetch(
          `${import.meta.env.VITE_API_URL}/api/recipes`,
          {
            credentials: "include",
          }
        );
        const recipesData = await recipesRes.json();
        setRecipes(recipesData);

        // Fetch production log
        const logRes = await fetch(
          `${import.meta.env.VITE_API_URL}/api/production`,
          {
            credentials: "include",
          }
        );
        const logData = await logRes.json();
        setProductionLog(
          logData.map((entry: any) => ({
            ...entry,
            date: new Date(entry.date),
          }))
        );
      } catch (err) {
        console.error("Failed to fetch data:", err);
        toast.error("Failed to load data");
      }
    };

    fetchData();
  }, []);

  const handleQuantityChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    // Only allow numbers
    if (/^\d*$/.test(e.target.value)) {
      setQuantity(e.target.value);
    }
  };

  const handleAddProduction = async () => {
    if (!selectedRecipe) {
      toast.error("Please select a recipe");
      return;
    }

    if (!quantity || parseInt(quantity) <= 0) {
      toast.error("Please enter a valid quantity");
      return;
    }

    if (!supervisor) {
      toast.error("Please enter a supervisor name");
      return;
    }

    const newEntry: ProductionEntry = {
      date,
      recipeId: selectedRecipe,
      quantity: parseInt(quantity),
      notes,
      supervisor,
    };

    try {
      // Add production log and update ingredient stocks
      const response = await fetch(
        `${import.meta.env.VITE_API_URL}/api/production`,
        {
          method: "POST",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(newEntry),
        }
      );

      if (!response.ok) {
        throw new Error("Failed to add production log");
      }

      // Get updated production log from response
      const updatedLog = await response.json();

      // Update local state with the new production log
      setProductionLog([
        {
          ...newEntry,
          date: new Date(newEntry.date),
        },
        ...productionLog,
      ]);

      // Reset form
      setSelectedRecipe("");
      setQuantity("50");
      setNotes("");
      setSupervisor("");

      toast.success("Production log added and inventory updated!");
    } catch (err) {
      console.error("Failed to add production:", err);
      toast.error("Failed to add production log");
    }
  };

  const getRecipeById = (id: string): Recipe | undefined => {
    return recipes.find((recipe) => recipe._id === id);
  };

  const getRecipeColor = (recipeName: string) => {
    switch (recipeName.toLowerCase()) {
      case "vanilla":
        return "vanilla";
      case "chocolate":
        return "chocolate";
      case "strawberry":
        return "strawberry";
      case "cookie dough":
        return "cookie";
      case "rocky road":
        return "rocky";
      default:
        return "ice";
    }
  };

  const exportLog = () => {
    toast.info("Export functionality", {
      description: "This would export the production log as CSV or PDF.",
    });
  };

  return (
    <Layout>
      <div className="space-y-8">
        <div className="flex flex-col gap-2">
          <h1 className="text-3xl font-bold tracking-tight">
            Production Tracking
          </h1>
          <p className="text-muted-foreground">
            Log your daily production batches.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <Card className="lg:col-span-1 hover-scale">
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <PlusCircle size={18} className="text-primary" />
                New Production Log
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Date</label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn(
                        "w-full justify-start text-left font-normal",
                        !date && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {date ? format(date, "PPP") : "Select date"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={date}
                      onSelect={(date) => date && setDate(date)}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Recipe</label>
                <Select
                  value={selectedRecipe}
                  onValueChange={setSelectedRecipe}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a recipe" />
                  </SelectTrigger>
                  <SelectContent>
                    {recipes.map((recipe) => (
                      <SelectItem key={recipe._id} value={recipe._id}>
                        {recipe.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Quantity</label>
                <Input
                  type="text"
                  value={quantity}
                  onChange={handleQuantityChange}
                  placeholder="Enter quantity"
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Supervisor</label>
                <Input
                  type="text"
                  value={supervisor}
                  onChange={(e) => setSupervisor(e.target.value)}
                  placeholder="Enter supervisor name"
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Notes</label>
                <Input
                  type="text"
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  placeholder="Add any notes"
                />
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={handleAddProduction} className="w-full">
                <Save className="w-4 h-4 mr-2" />
                Save Production Log
              </Button>
            </CardFooter>
          </Card>

          <Card className="lg:col-span-2">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg flex items-center gap-2">
                  <FileText size={18} className="text-primary" />
                  Production History
                </CardTitle>
                <Button variant="outline" size="sm" onClick={exportLog}>
                  <Clipboard className="w-4 h-4 mr-2" />
                  Export
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {productionLog.map((entry, index) => {
                  const recipe = getRecipeById(entry.recipeId);
                  return (
                    <div key={index}>
                      <div className="flex items-center justify-between">
                        <div className="space-y-1">
                          <div className="flex items-center gap-2">
                            <span className="font-medium">
                              {recipe?.name || "Unknown Recipe"}
                            </span>
                            <Badge>{entry.quantity} units</Badge>
                          </div>
                          <div className="flex gap-2 text-sm text-muted-foreground">
                            <span>{format(entry.date, "PPP")}</span>
                            <span>•</span>
                            <span>{entry.supervisor}</span>
                          </div>
                          {entry.notes && (
                            <p className="text-sm text-muted-foreground">
                              {entry.notes}
                            </p>
                          )}
                        </div>
                      </div>
                      {index < productionLog.length - 1 && (
                        <Separator className="mt-6" />
                      )}
                    </div>
                  );
                })}
                {productionLog.length === 0 && (
                  <p className="text-center text-muted-foreground">
                    No production logs yet
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </Layout>
  );
};

export default Production;

================
File: src/pages/Recipes.tsx
================
import React, { useState, useEffect } from "react";
import { Layout } from "@/components/Layout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { RecipeCard } from "@/components/Recipes/RecipeCard";
import { FilterX, Plus, Search } from "lucide-react";
import { toast } from "sonner";
import { Badge } from "@/components/ui/badge";
import { Recipe, Ingredient } from "@/lib/data";
import { AddRecipeModal } from "@/components/Recipe/AddRecipeModal";

const Recipes = () => {
  const initialRecipes: Recipe[] = [];
  const [recipes, setRecipes] = useState<Recipe[]>(initialRecipes);
  const [ingredients, setIngredients] = useState<Ingredient[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [addModalOpen, setAddModalOpen] = useState(false);
  const [editingRecipe, setEditingRecipe] = useState<Recipe | null>(null);

  useEffect(() => {
    const fetchRecipes = async () => {
      try {
        const res = await fetch(`${import.meta.env.VITE_API_URL}/api/recipes`, {
          credentials: "include",
        });
        const data = await res.json();
        setRecipes(data);
      } catch (err) {
        console.error("Failed to fetch recipes", err);
      }
    };

    const fetchIngredients = async () => {
      try {
        const res = await fetch(
          `${import.meta.env.VITE_API_URL}/api/ingredients`,
          {
            credentials: "include",
          }
        );
        const data = await res.json();
        setIngredients(data);
      } catch (err) {
        console.error("Failed to fetch ingredients", err);
      }
    };

    fetchRecipes();
    fetchIngredients();
  }, []);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  const handleClearSearch = () => {
    setSearchTerm("");
  };

  const handleAddRecipe = async (values: {
    name: string;
    ingredients: { ingredientId: string; amount: number }[];
  }) => {
    try {
      const response = await fetch(
        `${import.meta.env.VITE_API_URL}/api/recipes`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify(values),
        }
      );

      if (!response.ok) {
        throw new Error("Failed to create recipe");
      }

      const newRecipe = await response.json();
      setRecipes([...recipes, newRecipe]);
      toast.success("Recipe added successfully!");
    } catch (error) {
      console.error("Error adding recipe:", error);
      toast.error("Failed to add recipe");
    }
  };

  const handleEditRecipe = async (values: {
    name: string;
    ingredients: { ingredientId: string; amount: number }[];
  }) => {
    if (!editingRecipe) return;

    try {
      const response = await fetch(
        `${import.meta.env.VITE_API_URL}/api/recipes/${editingRecipe._id}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify(values),
        }
      );

      if (!response.ok) {
        throw new Error("Failed to update recipe");
      }

      const updatedRecipe = await response.json();
      setRecipes(
        recipes.map((r) => (r._id === updatedRecipe._id ? updatedRecipe : r))
      );
      toast.success("Recipe updated successfully!");
      setEditingRecipe(null);
    } catch (error) {
      console.error("Error updating recipe:", error);
      toast.error("Failed to update recipe");
    }
  };

  // Filter recipes based on search term
  const filteredRecipes = searchTerm
    ? recipes.filter((recipe) =>
        recipe.name.toLowerCase().includes(searchTerm.toLowerCase())
      )
    : recipes;

  return (
    <Layout>
      <div className="space-y-6">
        <div className="flex justify-between items-start flex-wrap gap-4">
          <div className="space-y-1">
            <h1 className="text-3xl font-bold tracking-tight">Recipes</h1>
            <p className="text-muted-foreground">
              Manage your recipes and production records.
            </p>
          </div>
          <Button onClick={() => setAddModalOpen(true)}>
            <Plus className="h-4 w-4 mr-2" />
            Add Recipe
          </Button>
        </div>

        <div className="flex items-center">
          <div className="relative flex-1 max-w-sm">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              placeholder="Search recipes..."
              className="pl-10 pr-10"
              value={searchTerm}
              onChange={handleSearch}
            />
            {searchTerm && (
              <Button
                variant="ghost"
                size="icon"
                className="absolute right-1 top-1/2 transform -translate-y-1/2 h-7 w-7"
                onClick={handleClearSearch}
              >
                <FilterX className="h-4 w-4" />
              </Button>
            )}
          </div>
        </div>

        <div className="space-y-4">
          <div className="flex items-center gap-2">
            <h2 className="text-xl font-semibold">Recipe Library</h2>
            <Badge className="bg-primary/10 text-primary border-primary/20 hover:bg-primary/20">
              {filteredRecipes.length} Recipes
            </Badge>
          </div>

          {filteredRecipes.length === 0 ? (
            <div className="flex flex-col items-center justify-center py-12 text-center">
              <div className="bg-muted/50 rounded-full p-3 mb-3">
                <Search className="h-6 w-6 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-medium">No recipes found</h3>
              <p className="text-muted-foreground mt-1">
                {searchTerm
                  ? `No results for "${searchTerm}"`
                  : "Try adding a recipe to get started."}
              </p>
              <Button
                variant="outline"
                className="mt-4"
                onClick={() => setAddModalOpen(true)}
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Recipe
              </Button>
            </div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4">
              {filteredRecipes.map((recipe) => (
                <RecipeCard
                  key={recipe._id}
                  recipe={recipe}
                  ingredients={ingredients}
                  onEdit={setEditingRecipe}
                  className="h-[290px]"
                />
              ))}
            </div>
          )}
        </div>
      </div>

      <AddRecipeModal
        open={addModalOpen || !!editingRecipe}
        onOpenChange={(open) => {
          setAddModalOpen(open);
          if (!open) setEditingRecipe(null);
        }}
        onAddRecipe={editingRecipe ? handleEditRecipe : handleAddRecipe}
        availableIngredients={ingredients}
        editingRecipe={editingRecipe}
      />
    </Layout>
  );
};

export default Recipes;

================
File: src/pages/Register.tsx
================
// src/pages/Register.tsx
import React from "react";
import { useNavigate, Link } from "react-router-dom";
import { useForm } from "react-hook-form";
import { toast } from "@/components/ui/use-toast";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useAuth } from "@/context/AuthContext";

interface RegisterFormData {
  username: string;
  password: string;
}

const Register = () => {
  const { register, handleSubmit } = useForm<RegisterFormData>();
  const { login } = useAuth();
  const navigate = useNavigate();

  const onSubmit = async (data: RegisterFormData) => {
    try {
      const res = await fetch(
        `${import.meta.env.VITE_API_URL}/api/auth/register`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify(data),
        }
      );

      const json = await res.json();

      if (!res.ok) throw new Error(json.message || "Registration failed");

      login(data.username); // Auto-login after register
      toast({
        title: "Success",
        description: "Account created and logged in!",
      });
      navigate("/");
    } catch (err: unknown) {
      const errorMessage =
        err instanceof Error ? err.message : "Something went wrong";
      toast({
        variant: "destructive",
        title: "Registration failed",
        description: errorMessage,
      });
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-background">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl text-center">Batchr</CardTitle>
          <CardTitle className="text-lg text-center">Create Account</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div>
              <Label htmlFor="username">Username</Label>
              <Input
                id="username"
                {...register("username", { required: true })}
              />
            </div>
            <div>
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                {...register("password", { required: true })}
              />
            </div>
            <Button type="submit" className="w-full">
              Sign Up
            </Button>
          </form>
          <div className="mt-4 text-center text-sm">
            Already have an account?{" "}
            <Link to="/login" className="text-primary hover:underline">
              Sign In
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Register;

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/App.tsx
================
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./context/AuthContext";
import Index from "./pages/Index";
import Inventory from "./pages/Inventory";
import Recipes from "./pages/Recipes";
import Production from "./pages/Production";
import Ordering from "./pages/Ordering";
import Planning from "./pages/Planning";
import NotFound from "./pages/NotFound";
import Login from "./pages/Login";
import Register from "./pages/Register";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <AuthProvider>
      <Toaster />
      <Sonner />
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Index />} />
          <Route path="/inventory" element={<Inventory />} />
          <Route path="/recipes" element={<Recipes />} />
          <Route path="/production" element={<Production />} />
          <Route path="/ordering" element={<Ordering />} />
          <Route path="/planning" element={<Planning />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </BrowserRouter>
    </AuthProvider>
  </QueryClientProvider>
);

export default App;

================
File: src/index.css
================
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 210 33% 99%;
    --foreground: 210 33% 15%;

    --card: 0 0% 100%;
    --card-foreground: 210 33% 15%;

    --popover: 0 0% 100%;
    --popover-foreground: 210 33% 15%;

    --primary: 206 48% 54%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 20% 96%;
    --secondary-foreground: 210 33% 15%;

    --muted: 210 20% 96%;
    --muted-foreground: 210 30% 45%;

    --accent: 210 25% 94%;
    --accent-foreground: 210 33% 15%;

    --destructive: 0 84% 60%;
    --destructive-foreground: 210 40% 98%;

    --border: 210 20% 92%;
    --input: 210 20% 92%;
    --ring: 206 48% 54%;

    --radius: 0.75rem;

    --sidebar-background: 0 0% 100%;
    --sidebar-foreground: 210 33% 25%;
    --sidebar-primary: 206 48% 54%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 210 20% 96%;
    --sidebar-accent-foreground: 210 33% 15%;
    --sidebar-border: 210 20% 92%;
    --sidebar-ring: 206 48% 54%;
  }

  .dark {
    --background: 210 33% 10%;
    --foreground: 210 20% 98%;

    --card: 210 33% 12%;
    --card-foreground: 210 20% 98%;

    --popover: 210 33% 12%;
    --popover-foreground: 210 20% 98%;

    --primary: 206 48% 54%;
    --primary-foreground: 210 20% 98%;

    --secondary: 210 30% 18%;
    --secondary-foreground: 210 20% 98%;

    --muted: 210 30% 18%;
    --muted-foreground: 210 20% 60%;

    --accent: 210 30% 18%;
    --accent-foreground: 210 20% 98%;

    --destructive: 0 62% 50%;
    --destructive-foreground: 210 20% 98%;

    --border: 210 30% 18%;
    --input: 210 30% 18%;
    --ring: 206 48% 54%;

    --sidebar-background: 210 33% 12%;
    --sidebar-foreground: 210 20% 90%;
    --sidebar-primary: 206 48% 54%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 210 30% 18%;
    --sidebar-accent-foreground: 210 20% 90%;
    --sidebar-border: 210 30% 18%;
    --sidebar-ring: 206 48% 54%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground font-sans;
  }

  h1, h2, h3, h4, h5, h6 {
    @apply font-semibold tracking-tight;
  }

  h1 {
    @apply text-4xl;
  }

  h2 {
    @apply text-3xl;
  }

  h3 {
    @apply text-2xl;
  }

  h4 {
    @apply text-xl;
  }

  h5 {
    @apply text-lg;
  }

  h6 {
    @apply text-base;
  }
}

@layer components {
  .glass-card {
    @apply bg-white/80 backdrop-blur-md border border-white/20 shadow-sm;
  }
  
  .page-transition {
    @apply animate-fade-in;
  }
  
  .hover-scale {
    @apply transition-transform duration-300 hover:scale-[1.02];
  }
  
  .section-divider {
    @apply h-px w-full bg-gradient-to-r from-transparent via-border to-transparent my-8;
  }
  
  .dashboard-card {
    @apply glass-card p-6 rounded-2xl hover-scale transition-all duration-300;
  }
  
  .icon-button {
    @apply p-2 rounded-full hover:bg-secondary transition-colors;
  }

  /* 3D Card Flip Classes */
  .perspective-1000 {
    perspective: 1000px;
  }
  
  .transform-style-3d {
    transform-style: preserve-3d;
  }
  
  .backface-hidden {
    backface-visibility: hidden;
  }
  
  .rotate-y-180 {
    transform: rotateY(180deg);
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: hsl(var(--muted));
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: hsl(var(--muted-foreground) / 0.3);
}

/* Smooth scrolling */
html {
  scroll-behavior: smooth;
}

/* Remove outline for non-keyboard focus */
:focus:not(:focus-visible) {
  outline: none;
}

/* Text selection */
::selection {
  background: hsl(var(--primary) / 0.2);
}

================
File: src/main.tsx
================
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .env.production
================
VITE_API_URL=https://batchr-deployment-production.up.railway.app

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: eslint.config.js
================
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Batchr</title>
    <meta name="description" content="Batchr" />
    <meta name="author" content="Lovable" />

    <meta property="og:title" content="Batchr" />
    <meta property="og:description" content="Batchr" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/batchr.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@lovable_dev" />
    <meta name="twitter:image" content="/batchr.png" />
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@tanstack/react-query": "^5.56.2",
    "bcryptjs": "^3.0.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/bcryptjs": "^2.4.6",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/2d3b195c-e4bf-4659-987a-133e7b6ab32b

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/2d3b195c-e4bf-4659-987a-133e7b6ab32b) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with .

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/2d3b195c-e4bf-4659-987a-133e7b6ab32b) and click on Share -> Publish.

## I want to use a custom domain - is that possible?

We don't support custom domains (yet). If you want to deploy your project under your own domain then we recommend using Netlify. Visit our docs for more details: [Custom domains](https://docs.lovable.dev/tips-tricks/custom-domain/)

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			fontFamily: {
				sans: ['Inter', 'sans-serif'],
			},
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				ice: {
					DEFAULT: '#EBF4F8',
					50: '#F7FBFD',
					100: '#EBF4F8',
					200: '#C5E0EA',
					300: '#9FCBDD',
					400: '#78B5CF',
					500: '#52A0C1',
					600: '#3984A3',
					700: '#2A6379',
					800: '#1C434F',
					900: '#0E2126',
					foreground: '#1C434F'
				},
				strawberry: {
					DEFAULT: '#FFE5EA',
					foreground: '#9A2C41'
				},
				chocolate: {
					DEFAULT: '#E8D9C9',
					foreground: '#634832'
				},
				vanilla: {
					DEFAULT: '#FFF8E1',
					foreground: '#8A7645'
				},
				cookie: {
					DEFAULT: '#F0E6D2',
					foreground: '#6B583F'
				},
				rocky: {
					DEFAULT: '#E1D9D6',
					foreground: '#5F4C47'
				},
				danger: {
					DEFAULT: '#FDDAD6',
					foreground: '#A42A1B'
				},
				warning: {
					DEFAULT: '#FFF1D6',
					foreground: '#95631D'
				},
				success: {
					DEFAULT: '#DEFFDC',
					foreground: '#256F1E'
				},
			},
			keyframes: {
				"accordion-down": {
					from: { height: '0' },
					to: { height: 'var(--radix-accordion-content-height)' },
				},
				"accordion-up": {
					from: { height: 'var(--radix-accordion-content-height)' },
					to: { height: '0' },
				},
				"fade-in": {
					from: { opacity: '0', transform: 'translateY(8px)' },
					to: { opacity: '1', transform: 'translateY(0)' },
				},
				"fade-out": {
					from: { opacity: '1', transform: 'translateY(0)' },
					to: { opacity: '0', transform: 'translateY(8px)' },
				},
				"scale-in": {
					from: { opacity: '0', transform: 'scale(0.97)' },
					to: { opacity: '1', transform: 'scale(1)' },
				},
				"scale-out": {
					from: { opacity: '1', transform: 'scale(1)' },
					to: { opacity: '0', transform: 'scale(0.97)' },
				},
				"slide-in": {
					from: { opacity: '0', transform: 'translateX(20px)' },
					to: { opacity: '1', transform: 'translateX(0)' },
				},
				"slide-out": {
					from: { opacity: '1', transform: 'translateX(0)' },
					to: { opacity: '0', transform: 'translateX(20px)' },
				},
			},
			animation: {
				"accordion-down": "accordion-down 0.2s ease-out",
				"accordion-up": "accordion-up 0.2s ease-out",
				"fade-in": "fade-in 0.3s ease-out",
				"fade-out": "fade-out 0.3s ease-out",
				"scale-in": "scale-in 0.2s ease-out",
				"scale-out": "scale-out 0.2s ease-out",
				"slide-in": "slide-in 0.3s ease-out",
				"slide-out": "slide-out 0.3s ease-out",
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
		}
	},
	safelist: [
		'bg-vanilla/40', 'border-vanilla/60', 'text-vanilla-foreground', 'text-vanilla-foreground/80', 'text-vanilla-foreground/70',
		'bg-chocolate/40', 'border-chocolate/60', 'text-chocolate-foreground', 'text-chocolate-foreground/80', 'text-chocolate-foreground/70',
		'bg-strawberry/40', 'border-strawberry/60', 'text-strawberry-foreground', 'text-strawberry-foreground/80', 'text-strawberry-foreground/70',
		'bg-cookie/40', 'border-cookie/60', 'text-cookie-foreground', 'text-cookie-foreground/80', 'text-cookie-foreground/70',
		'bg-rocky/40', 'border-rocky/60', 'text-rocky-foreground', 'text-rocky-foreground/80', 'text-rocky-foreground/70',
		'bg-ice/40', 'border-ice/60', 'text-ice-foreground', 'text-ice-foreground/80', 'text-ice-foreground/70',
		'hover:text-vanilla-foreground', 'hover:bg-vanilla/60',
		'hover:text-chocolate-foreground', 'hover:bg-chocolate/60',
		'hover:text-strawberry-foreground', 'hover:bg-strawberry/60',
		'hover:text-cookie-foreground', 'hover:bg-cookie/60',
		'hover:text-rocky-foreground', 'hover:bg-rocky/60',
		'hover:text-ice-foreground', 'hover:bg-ice/60',
		'border-vanilla-foreground/30', 'bg-vanilla/30',
		'border-chocolate-foreground/30', 'bg-chocolate/30',
		'border-strawberry-foreground/30', 'bg-strawberry/30',
		'border-cookie-foreground/30', 'bg-cookie/30',
		'border-rocky-foreground/30', 'bg-rocky/30',
		'border-ice-foreground/30', 'bg-ice/30',
	],
	plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src", "lib/data.ts"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "rootDir": "../",
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vercel.json
================
{
    "rewrites": [
      { "source": "/(.*)", "destination": "/" }
    ]
}

================
File: vite.config.ts
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
    proxy: {
      '/api': 'http://localhost:5001',
    },
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));



================================================================
End of Codebase
================================================================
